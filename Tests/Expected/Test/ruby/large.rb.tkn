{language.ruby:Kadet\Highlighter\Parser\Token\LanguageToken}{comment:Kadet\Highlighter\Parser\Token\Token}# external dependencies{/comment:Kadet\Highlighter\Parser\Token\Token}
{call:Kadet\Highlighter\Parser\Token\Token}require{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'rack'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
{call:Kadet\Highlighter\Parser\Token\Token}require{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'tilt'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
{call:Kadet\Highlighter\Parser\Token\Token}require{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"rack/protection"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}

{comment:Kadet\Highlighter\Parser\Token\Token}# stdlib dependencies{/comment:Kadet\Highlighter\Parser\Token\Token}
{call:Kadet\Highlighter\Parser\Token\Token}require{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'thread'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
{call:Kadet\Highlighter\Parser\Token\Token}require{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'time'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
{call:Kadet\Highlighter\Parser\Token\Token}require{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'uri'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}

{comment:Kadet\Highlighter\Parser\Token\Token}# other files we need{/comment:Kadet\Highlighter\Parser\Token\Token}
{call:Kadet\Highlighter\Parser\Token\Token}require{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'sinatra/showexceptions'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
{call:Kadet\Highlighter\Parser\Token\Token}require{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'sinatra/version'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}

{keyword:Kadet\Highlighter\Parser\Token\Token}module{/keyword:Kadet\Highlighter\Parser\Token\Token} Sinatra
  {comment:Kadet\Highlighter\Parser\Token\Token}# The request object. See Rack::Request for more info:{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# http://rack.rubyforge.org/doc/classes/Rack/Request.html{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Request{/symbol.class:Kadet\Highlighter\Parser\Token\Token} < Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Request{/constant:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# Returns an array of acceptable media types for the response{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}accept{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@env{/variable.property:Kadet\Highlighter\Parser\Token\Token}[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'sinatra.accept'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] ||= {keyword:Kadet\Highlighter\Parser\Token\Token}begin{/keyword:Kadet\Highlighter\Parser\Token\Token}
        entries = {variable.property:Kadet\Highlighter\Parser\Token\Token}@env{/variable.property:Kadet\Highlighter\Parser\Token\Token}[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP_ACCEPT'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}].to_s.{call:Kadet\Highlighter\Parser\Token\Token}split{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}','{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})
        entries.map { |e| {call:Kadet\Highlighter\Parser\Token\Token}accept_entry{/call:Kadet\Highlighter\Parser\Token\Token}(e) }.{call:Kadet\Highlighter\Parser\Token\Token}sort_by{/call:Kadet\Highlighter\Parser\Token\Token}(&{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:last{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}).{call:Kadet\Highlighter\Parser\Token\Token}map{/call:Kadet\Highlighter\Parser\Token\Token}(&{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:first{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}preferred_type{/call:Kadet\Highlighter\Parser\Token\Token}(*types)
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} accept.first {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} types.empty?
      types.{call:Kadet\Highlighter\Parser\Token\Token}flatten!{/call:Kadet\Highlighter\Parser\Token\Token}
      accept.{call:Kadet\Highlighter\Parser\Token\Token}detect{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |pattern|
        type = types.detect { |t| File.{call:Kadet\Highlighter\Parser\Token\Token}fnmatch{/call:Kadet\Highlighter\Parser\Token\Token}(pattern, t) }
        {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} type {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} type
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}alias{/keyword:Kadet\Highlighter\Parser\Token\Token} accept? preferred_type
    {keyword:Kadet\Highlighter\Parser\Token\Token}alias{/keyword:Kadet\Highlighter\Parser\Token\Token} secure? ssl?

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}forwarded{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@env{/variable.property:Kadet\Highlighter\Parser\Token\Token}.include? {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"HTTP_X_FORWARDED_HOST"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}safe{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?
      {call:Kadet\Highlighter\Parser\Token\Token}get?{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}head?{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}options?{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}trace?{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}idempotent{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?
      {call:Kadet\Highlighter\Parser\Token\Token}safe?{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}put?{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}delete?{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}accept_entry{/call:Kadet\Highlighter\Parser\Token\Token}(entry)
      type, *options = entry.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}' '{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}).{call:Kadet\Highlighter\Parser\Token\Token}split{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}';'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})
      quality = {number:Kadet\Highlighter\Parser\Token\Token}0{/number:Kadet\Highlighter\Parser\Token\Token} {comment:Kadet\Highlighter\Parser\Token\Token}# we sort smallest first{/comment:Kadet\Highlighter\Parser\Token\Token}
      options.delete_if { |e| quality = {number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token} - e[{number:Kadet\Highlighter\Parser\Token\Token}2{/number:Kadet\Highlighter\Parser\Token\Token}..{number:Kadet\Highlighter\Parser\Token\Token}-1{/number:Kadet\Highlighter\Parser\Token\Token}].to_f {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} e.start_with? {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'q='{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} }
      [type, [quality, type.{call:Kadet\Highlighter\Parser\Token\Token}count{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'*'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}), {number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token} - options.size]]
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# The response object. See Rack::Response and Rack::ResponseHelpers for{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# more info:{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# http://rack.rubyforge.org/doc/classes/Rack/Response.html{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# http://rack.rubyforge.org/doc/classes/Rack/Response/Helpers.html{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Response{/symbol.class:Kadet\Highlighter\Parser\Token\Token} < Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Response{/constant:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}body{/symbol.function:Kadet\Highlighter\Parser\Token\Token}=(value)
      value = value.{call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}while{/keyword:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Response{/constant:Kadet\Highlighter\Parser\Token\Token} === {call:Kadet\Highlighter\Parser\Token\Token}value{/call:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@body{/variable.property:Kadet\Highlighter\Parser\Token\Token} = String === value ? [value.to_str] : value
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}each{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      block_given? ? {keyword:Kadet\Highlighter\Parser\Token\Token}super{/keyword:Kadet\Highlighter\Parser\Token\Token} : {call:Kadet\Highlighter\Parser\Token\Token}enum_for{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:each{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}finish{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} status.to_i / {number:Kadet\Highlighter\Parser\Token\Token}100{/number:Kadet\Highlighter\Parser\Token\Token} == {number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}
        headers.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"Content-Length"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
        headers.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"Content-Type"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} Array === {call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}not{/keyword:Kadet\Highlighter\Parser\Token\Token} [{number:Kadet\Highlighter\Parser\Token\Token}204{/number:Kadet\Highlighter\Parser\Token\Token}, {number:Kadet\Highlighter\Parser\Token\Token}304{/number:Kadet\Highlighter\Parser\Token\Token}].{call:Kadet\Highlighter\Parser\Token\Token}include?{/call:Kadet\Highlighter\Parser\Token\Token}(status.to_i)
        {comment:Kadet\Highlighter\Parser\Token\Token}# if some other code has already set Content-Length, don't muck with it{/comment:Kadet\Highlighter\Parser\Token\Token}
        {comment:Kadet\Highlighter\Parser\Token\Token}# currently, this would be the static file-handler{/comment:Kadet\Highlighter\Parser\Token\Token}
        headers[{string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"Content-Length"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}] ||= body.{call:Kadet\Highlighter\Parser\Token\Token}inject{/call:Kadet\Highlighter\Parser\Token\Token}({number:Kadet\Highlighter\Parser\Token\Token}0{/number:Kadet\Highlighter\Parser\Token\Token}) { |l, p| l + Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Utils{/constant:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}bytesize{/call:Kadet\Highlighter\Parser\Token\Token}(p) }.to_s
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Rack::Response#finish sometimes returns self as response body. We don't want that.{/comment:Kadet\Highlighter\Parser\Token\Token}
      status, headers, result = {keyword:Kadet\Highlighter\Parser\Token\Token}super{/keyword:Kadet\Highlighter\Parser\Token\Token}
      result = {call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} result == {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}
      [status, headers, result]
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Some Rack handlers (Thin, Rainbows!) implement an extended body object protocol, however,{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# some middleware (namely Rack::Lint) will break it by not mirroring the methods in question.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# This middleware will detect an extended body object and will make sure it reaches the{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# handler directly. We do this here, so our middleware and middleware set up by the app will{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# still be able to run.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}ExtendedRack{/symbol.class:Kadet\Highlighter\Parser\Token\Token} < Struct.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:app{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(env)
      result, callback = app.{call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(env), env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'async.callback'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} result {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} callback {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}async?{/call:Kadet\Highlighter\Parser\Token\Token}(*result)
      after_response { callback.{call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token} result }
      {call:Kadet\Highlighter\Parser\Token\Token}setup_close{/call:Kadet\Highlighter\Parser\Token\Token}(env, *result)
      {call:Kadet\Highlighter\Parser\Token\Token}throw{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:async{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}setup_close{/call:Kadet\Highlighter\Parser\Token\Token}(env, status, header, body)
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} body.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:close{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} env.{call:Kadet\Highlighter\Parser\Token\Token}include?{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'async.close'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'async.close'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}].callback { body.close }
      env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'async.close'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}].errback { body.close }
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}after_response{/call:Kadet\Highlighter\Parser\Token\Token}(&block)
      {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} NotImplementedError, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"only supports EventMachine at the moment"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}defined{/keyword:Kadet\Highlighter\Parser\Token\Token}? EventMachine
      EventMachine.{call:Kadet\Highlighter\Parser\Token\Token}next_tick{/call:Kadet\Highlighter\Parser\Token\Token}(&block)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}async?{/call:Kadet\Highlighter\Parser\Token\Token}(status, headers, body)
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} status == {number:Kadet\Highlighter\Parser\Token\Token}-1{/number:Kadet\Highlighter\Parser\Token\Token}
      body.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:callback{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} body.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:errback{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Behaves exactly like Rack::CommonLogger with the notable exception that it does nothing,{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# if another CommonLogger is already in the middleware chane.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}CommonLogger{/symbol.class:Kadet\Highlighter\Parser\Token\Token} < Rack::{constant:Kadet\Highlighter\Parser\Token\Token}CommonLogger{/constant:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(env)
      env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'sinatra.commonlogger'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] ? {variable.property:Kadet\Highlighter\Parser\Token\Token}@app{/variable.property:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(env) : {keyword:Kadet\Highlighter\Parser\Token\Token}super{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    superclass.{call:Kadet\Highlighter\Parser\Token\Token}class_eval{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}alias{/keyword:Kadet\Highlighter\Parser\Token\Token} call_without_check call {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} method_defined? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:call_without_check{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(env)
        env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'sinatra.commonlogger'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}call_without_check{/call:Kadet\Highlighter\Parser\Token\Token}(env)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}NotFound{/symbol.class:Kadet\Highlighter\Parser\Token\Token} < NameError {comment:Kadet\Highlighter\Parser\Token\Token}#:nodoc:{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}http_status{/symbol.function:Kadet\Highlighter\Parser\Token\Token}; {number:Kadet\Highlighter\Parser\Token\Token}404{/number:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Methods available to routes, before/after filters, and views.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}module{/keyword:Kadet\Highlighter\Parser\Token\Token} Helpers
    {comment:Kadet\Highlighter\Parser\Token\Token}# Set or retrieve the response status code.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}status{/call:Kadet\Highlighter\Parser\Token\Token}(value={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token})
      response.status = {call:Kadet\Highlighter\Parser\Token\Token}value{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} value
      response.{call:Kadet\Highlighter\Parser\Token\Token}status{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Set or retrieve the response body. When a block is given,{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# evaluation is deferred until the body is read with #each.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token}(value={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}, &block)
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} block_given?
        {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} block.{symbol.function:Kadet\Highlighter\Parser\Token\Token}each{/symbol.function:Kadet\Highlighter\Parser\Token\Token}; {call:Kadet\Highlighter\Parser\Token\Token}yield{/call:Kadet\Highlighter\Parser\Token\Token}(call) {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        response.body = {call:Kadet\Highlighter\Parser\Token\Token}block{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} value
        response.body = {call:Kadet\Highlighter\Parser\Token\Token}value{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
        response.{call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Halt processing and redirect to the URI provided.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}redirect{/call:Kadet\Highlighter\Parser\Token\Token}(uri, *args)
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP_VERSION'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] == {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP/1.1'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} env[{string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"REQUEST_METHOD"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}] != {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'GET'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
        {call:Kadet\Highlighter\Parser\Token\Token}status{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}303{/number:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}status{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}302{/number:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# According to RFC 2616 section 14.30, "the field value consists of a{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# single absolute URI"{/comment:Kadet\Highlighter\Parser\Token\Token}
      response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Location'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = {call:Kadet\Highlighter\Parser\Token\Token}uri{/call:Kadet\Highlighter\Parser\Token\Token}(uri, settings.absolute_redirects?, settings.prefixed_redirects?)
      {call:Kadet\Highlighter\Parser\Token\Token}halt{/call:Kadet\Highlighter\Parser\Token\Token}(*args)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Generates the absolute URI for a given path in the app.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# Takes Rack routers and reverse proxies into account.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}uri{/call:Kadet\Highlighter\Parser\Token\Token}(addr = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}, absolute = {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}, add_script_name = {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token})
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} addr {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} addr =~ {string.regex:Kadet\Highlighter\Parser\Token\Token}/{operator.escape:Kadet\Highlighter\Parser\Token\Token}\A{/operator.escape:Kadet\Highlighter\Parser\Token\Token}[A-z][A-z0-9{operator.escape:Kadet\Highlighter\Parser\Token\Token}\+{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\.{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\-{/operator.escape:Kadet\Highlighter\Parser\Token\Token}]*:/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}
      uri = [host = {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}""{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}]
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} absolute
        host << {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"http{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'s'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} request.secure?}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}:{string.regex:Kadet\Highlighter\Parser\Token\Token}//{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} request.for{call:Kadet\Highlighter\Parser\Token\Token}warded?{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} request.port != (request.secure? ? {number:Kadet\Highlighter\Parser\Token\Token}443{/number:Kadet\Highlighter\Parser\Token\Token} : {number:Kadet\Highlighter\Parser\Token\Token}80{/number:Kadet\Highlighter\Parser\Token\Token})
          host << request.host_with_por{call:Kadet\Highlighter\Parser\Token\Token}t{/call:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
          host << request.host
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      uri << request.script_name.to_s {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} add_script_name
      uri << (addr ? addr : request.path_info).to_s
      File.{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token} uri
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}alias{/keyword:Kadet\Highlighter\Parser\Token\Token} url uri
    {keyword:Kadet\Highlighter\Parser\Token\Token}alias{/keyword:Kadet\Highlighter\Parser\Token\Token} to uri

    {comment:Kadet\Highlighter\Parser\Token\Token}# Halt processing and return the error status provided.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}error{/call:Kadet\Highlighter\Parser\Token\Token}(code, body={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token})
      code, body    = {number:Kadet\Highlighter\Parser\Token\Token}500{/number:Kadet\Highlighter\Parser\Token\Token}, code.to_str {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} code.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:to_str{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      response.body = {call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} body.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}?
      {call:Kadet\Highlighter\Parser\Token\Token}halt{/call:Kadet\Highlighter\Parser\Token\Token} code
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Halt processing and return a 404 Not Found.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}not_found{/call:Kadet\Highlighter\Parser\Token\Token}(body={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token})
      {call:Kadet\Highlighter\Parser\Token\Token}error{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}404{/number:Kadet\Highlighter\Parser\Token\Token}, body
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Set multiple response headers with Hash.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}headers{/call:Kadet\Highlighter\Parser\Token\Token}(hash={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token})
      response.headers.merge! hash {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} hash
      response.{call:Kadet\Highlighter\Parser\Token\Token}headers{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Access the underlying Rack session.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}session{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      request.{call:Kadet\Highlighter\Parser\Token\Token}session{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Access shared logger object.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}logger{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      request.{call:Kadet\Highlighter\Parser\Token\Token}logger{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Look up a media type by file extension in Rack's mime registry.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}mime_type{/call:Kadet\Highlighter\Parser\Token\Token}(type)
      Base.{call:Kadet\Highlighter\Parser\Token\Token}mime_type{/call:Kadet\Highlighter\Parser\Token\Token}(type)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Set the Content-Type of the response body given a media type or file{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# extension.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}content_type{/call:Kadet\Highlighter\Parser\Token\Token}(type = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}, params={})
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Type'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} type
      default = params.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      mime_type = {call:Kadet\Highlighter\Parser\Token\Token}mime_type{/call:Kadet\Highlighter\Parser\Token\Token}(type) || {call:Kadet\Highlighter\Parser\Token\Token}default{/call:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}fail{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"Unknown media type: %p"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} % type {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} mime_type.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}?
      mime_type = mime_type.{call:Kadet\Highlighter\Parser\Token\Token}dup{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} params.include? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:charset{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.add_charset.all? { |p| {keyword:Kadet\Highlighter\Parser\Token\Token}not{/keyword:Kadet\Highlighter\Parser\Token\Token} p === mime_type }
        params[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:charset{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] = params.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'charset'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}) || settings.{call:Kadet\Highlighter\Parser\Token\Token}default_encoding{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      params.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:charset{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} mime_type.include? {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'charset'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} params.empty?
        mime_type << (mime_type.{call:Kadet\Highlighter\Parser\Token\Token}include?{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}';'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}) ? {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}', '{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} : {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}';'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})
        mime_type << params.map { |kv| kv.{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'='{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}) }.{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}', '{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Type'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = {call:Kadet\Highlighter\Parser\Token\Token}mime_type{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Set the Content-Disposition to "attachment" with the specified filename,{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# instructing the user agents to prompt to save.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}attachment{/call:Kadet\Highlighter\Parser\Token\Token}(filename={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token})
      response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Disposition'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'attachment'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} filename
        params = {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'; filename="%s"'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} % File.{call:Kadet\Highlighter\Parser\Token\Token}basename{/call:Kadet\Highlighter\Parser\Token\Token}(filename)
        response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Disposition'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] << params
        ext = File.{call:Kadet\Highlighter\Parser\Token\Token}extname{/call:Kadet\Highlighter\Parser\Token\Token}(filename)
        {call:Kadet\Highlighter\Parser\Token\Token}content_type{/call:Kadet\Highlighter\Parser\Token\Token}(ext) {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Type'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} ext.{call:Kadet\Highlighter\Parser\Token\Token}empty?{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Use the contents of the file at +path+ as the response body.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}send_file{/call:Kadet\Highlighter\Parser\Token\Token}(path, opts={})
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} opts[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}not{/keyword:Kadet\Highlighter\Parser\Token\Token} response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Type'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]
        {call:Kadet\Highlighter\Parser\Token\Token}content_type{/call:Kadet\Highlighter\Parser\Token\Token} opts[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] || File.{call:Kadet\Highlighter\Parser\Token\Token}extname{/call:Kadet\Highlighter\Parser\Token\Token}(path), {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'application/octet-stream'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} opts[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:disposition{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] == {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'attachment'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} || opts[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:filename{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}]
        {call:Kadet\Highlighter\Parser\Token\Token}attachment{/call:Kadet\Highlighter\Parser\Token\Token} opts[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:filename{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] || {call:Kadet\Highlighter\Parser\Token\Token}path{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} opts[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:disposition{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] == {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'inline'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
        response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Disposition'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'inline'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {call:Kadet\Highlighter\Parser\Token\Token}last_modified{/call:Kadet\Highlighter\Parser\Token\Token} opts[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:last_modified{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} opts[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:last_modified{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}]

      file      = Rack::{constant:Kadet\Highlighter\Parser\Token\Token}File{/constant:Kadet\Highlighter\Parser\Token\Token}.new {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}
      file.path = {call:Kadet\Highlighter\Parser\Token\Token}path{/call:Kadet\Highlighter\Parser\Token\Token}
      result    = file.{call:Kadet\Highlighter\Parser\Token\Token}serving{/call:Kadet\Highlighter\Parser\Token\Token} env
      result[{number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}].each { |k,v| headers[k] ||= v }
      headers[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Length'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = result[{number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}][{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Length'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]
      {call:Kadet\Highlighter\Parser\Token\Token}halt{/call:Kadet\Highlighter\Parser\Token\Token} opts[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:status{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] || result[{number:Kadet\Highlighter\Parser\Token\Token}0{/number:Kadet\Highlighter\Parser\Token\Token}], result[{number:Kadet\Highlighter\Parser\Token\Token}2{/number:Kadet\Highlighter\Parser\Token\Token}]
    {keyword:Kadet\Highlighter\Parser\Token\Token}rescue{/keyword:Kadet\Highlighter\Parser\Token\Token} Errno::{constant:Kadet\Highlighter\Parser\Token\Token}ENOENT{/constant:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}not_found{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Class of the response body in case you use #stream.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# Three things really matter: The front and back block (back being the{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# blog generating content, front the one sending it to the client) and{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# the scheduler, integrating with whatever concurrency feature the Rack{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# handler is using.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# Scheduler has to respond to defer and schedule.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Stream{/symbol.class:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}schedule{/call:Kadet\Highlighter\Parser\Token\Token}(*) {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}defer{/call:Kadet\Highlighter\Parser\Token\Token}(*)    {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}initialize{/call:Kadet\Highlighter\Parser\Token\Token}(scheduler = {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token}, keep_open = {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}, &back)
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@back{/variable.property:Kadet\Highlighter\Parser\Token\Token}, {variable.property:Kadet\Highlighter\Parser\Token\Token}@scheduler{/variable.property:Kadet\Highlighter\Parser\Token\Token}, {variable.property:Kadet\Highlighter\Parser\Token\Token}@keep_open{/variable.property:Kadet\Highlighter\Parser\Token\Token} = back.to_proc, scheduler, keep_open
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@callbacks{/variable.property:Kadet\Highlighter\Parser\Token\Token}, {variable.property:Kadet\Highlighter\Parser\Token\Token}@closed{/variable.property:Kadet\Highlighter\Parser\Token\Token} = [], {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}close{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} {variable.property:Kadet\Highlighter\Parser\Token\Token}@closed{/variable.property:Kadet\Highlighter\Parser\Token\Token}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@closed{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@scheduler{/variable.property:Kadet\Highlighter\Parser\Token\Token}.schedule { {variable.property:Kadet\Highlighter\Parser\Token\Token}@callbacks{/variable.property:Kadet\Highlighter\Parser\Token\Token}.each { |c| c.call }}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}each{/call:Kadet\Highlighter\Parser\Token\Token}(&front)
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@front{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {call:Kadet\Highlighter\Parser\Token\Token}front{/call:Kadet\Highlighter\Parser\Token\Token}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@scheduler{/variable.property:Kadet\Highlighter\Parser\Token\Token}.defer {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}begin{/keyword:Kadet\Highlighter\Parser\Token\Token}
            {variable.property:Kadet\Highlighter\Parser\Token\Token}@back{/variable.property:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}({constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token})
          {keyword:Kadet\Highlighter\Parser\Token\Token}rescue{/keyword:Kadet\Highlighter\Parser\Token\Token} Exception => e
            {variable.property:Kadet\Highlighter\Parser\Token\Token}@scheduler{/variable.property:Kadet\Highlighter\Parser\Token\Token}.schedule { {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} e }
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {call:Kadet\Highlighter\Parser\Token\Token}close{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} {variable.property:Kadet\Highlighter\Parser\Token\Token}@keep_open{/variable.property:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} <<(data)
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@scheduler{/variable.property:Kadet\Highlighter\Parser\Token\Token}.schedule { {variable.property:Kadet\Highlighter\Parser\Token\Token}@front{/variable.property:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(data.to_s) }
        {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}callback{/call:Kadet\Highlighter\Parser\Token\Token}(&block)
        {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} {variable.property:Kadet\Highlighter\Parser\Token\Token}@closed{/variable.property:Kadet\Highlighter\Parser\Token\Token}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@callbacks{/variable.property:Kadet\Highlighter\Parser\Token\Token} << block
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}alias{/keyword:Kadet\Highlighter\Parser\Token\Token} errback callback
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Allows to start sending data to the client even though later parts of{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# the response body have not yet been generated.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# The close parameter specifies whether Stream#close should be called{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# after the block has been executed. This is only relevant for evented{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# servers like Thin or Rainbows.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}stream{/call:Kadet\Highlighter\Parser\Token\Token}(keep_open = {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token})
      scheduler = env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'async.callback'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] ? EventMachine : Stream
      current   = {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token}.dup
      {call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token} Stream.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}(scheduler, keep_open) { |out| {call:Kadet\Highlighter\Parser\Token\Token}with_params{/call:Kadet\Highlighter\Parser\Token\Token}(current) { {call:Kadet\Highlighter\Parser\Token\Token}yield{/call:Kadet\Highlighter\Parser\Token\Token}(out) } }
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Specify response freshness policy for HTTP caches (Cache-Control header).{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# Any number of non-value directives (:public, :private, :no_cache,{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# :no_store, :must_revalidate, :proxy_revalidate) may be passed along with{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# a Hash of value directives (:max_age, :min_stale, :s_max_age).{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#   cache_control :public, :must_revalidate, :max_age => 60{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#   => Cache-Control: public, must-revalidate, max-age=60{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# See RFC 2616 / 14.9 for more on standard cache control directives:{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# http://tools.ietf.org/html/rfc2616#section-14.9.1{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}cache_control{/call:Kadet\Highlighter\Parser\Token\Token}(*values)
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} values.last.{call:Kadet\Highlighter\Parser\Token\Token}kind_of?{/call:Kadet\Highlighter\Parser\Token\Token}(Hash)
        hash = values.{call:Kadet\Highlighter\Parser\Token\Token}pop{/call:Kadet\Highlighter\Parser\Token\Token}
        hash.reject! { |k,v| v == {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token} }
        hash.reject! { |k,v| values << k {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} v == {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token} }
      {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
        hash = {}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      values.map! { |value| value.to_s.{call:Kadet\Highlighter\Parser\Token\Token}tr{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'_'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken},{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'-'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}) }
      hash.{call:Kadet\Highlighter\Parser\Token\Token}each{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |key, value|
        key = key.to_s.{call:Kadet\Highlighter\Parser\Token\Token}tr{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'_'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}, {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'-'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})
        value = value.{call:Kadet\Highlighter\Parser\Token\Token}to_i{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} key == {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"max-age"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
        values << [key, value].{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'='{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Cache-Control'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = values.{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}', '{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} values.any?
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Set the Expires header and Cache-Control/max-age directive. Amount{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# can be an integer number of seconds in the future or a Time object{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# indicating when the response should be considered "stale". The remaining{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# "values" arguments are passed to the #cache_control helper:{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#   expires 500, :public, :must_revalidate{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#   => Cache-Control: public, must-revalidate, max-age=60{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#   => Expires: Mon, 08 Jun 2009 08:50:17 GMT{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}expires{/call:Kadet\Highlighter\Parser\Token\Token}(amount, *values)
      values << {} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} values.last.{call:Kadet\Highlighter\Parser\Token\Token}kind_of?{/call:Kadet\Highlighter\Parser\Token\Token}(Hash)

      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} amount.is_a? Integer
        time    = Time.now + amount.to_i
        max_age = {call:Kadet\Highlighter\Parser\Token\Token}amount{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
        time    = {call:Kadet\Highlighter\Parser\Token\Token}time_for{/call:Kadet\Highlighter\Parser\Token\Token} amount
        max_age = time - Time.now
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      values.last.{call:Kadet\Highlighter\Parser\Token\Token}merge!{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:max_age{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => max_age)
      {call:Kadet\Highlighter\Parser\Token\Token}cache_control{/call:Kadet\Highlighter\Parser\Token\Token}(*values)

      response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Expires'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = time.{call:Kadet\Highlighter\Parser\Token\Token}httpdate{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Set the last modified time of the resource (HTTP 'Last-Modified' header){/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# and halt if conditional GET matches. The +time+ argument is a Time,{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# DateTime, or other object that responds to +to_time+.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# When the current request includes an 'If-Modified-Since' header that is{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# equal or later than the time specified, execution is immediately halted{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# with a '304 Not Modified' response.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}last_modified{/call:Kadet\Highlighter\Parser\Token\Token}(time)
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} time
      time = {call:Kadet\Highlighter\Parser\Token\Token}time_for{/call:Kadet\Highlighter\Parser\Token\Token} time
      response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Last-Modified'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = time.{call:Kadet\Highlighter\Parser\Token\Token}httpdate{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP_IF_NONE_MATCH'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]

      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} status == {number:Kadet\Highlighter\Parser\Token\Token}200{/number:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP_IF_MODIFIED_SINCE'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]
        {comment:Kadet\Highlighter\Parser\Token\Token}# compare based on seconds since epoch{/comment:Kadet\Highlighter\Parser\Token\Token}
        since = Time.{call:Kadet\Highlighter\Parser\Token\Token}httpdate{/call:Kadet\Highlighter\Parser\Token\Token}(env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP_IF_MODIFIED_SINCE'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]).to_i
        {call:Kadet\Highlighter\Parser\Token\Token}halt{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}304{/number:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} since >= time.{call:Kadet\Highlighter\Parser\Token\Token}to_i{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {call:Kadet\Highlighter\Parser\Token\Token}if{/call:Kadet\Highlighter\Parser\Token\Token} ({call:Kadet\Highlighter\Parser\Token\Token}success?{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} status == {number:Kadet\Highlighter\Parser\Token\Token}412{/number:Kadet\Highlighter\Parser\Token\Token}) {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP_IF_UNMODIFIED_SINCE'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]
        {comment:Kadet\Highlighter\Parser\Token\Token}# compare based on seconds since epoch{/comment:Kadet\Highlighter\Parser\Token\Token}
        since = Time.{call:Kadet\Highlighter\Parser\Token\Token}httpdate{/call:Kadet\Highlighter\Parser\Token\Token}(env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP_IF_UNMODIFIED_SINCE'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]).to_i
        {call:Kadet\Highlighter\Parser\Token\Token}halt{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}412{/number:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} since < time.to_i
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}rescue{/keyword:Kadet\Highlighter\Parser\Token\Token} ArgumentError
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Set the response entity tag (HTTP 'ETag' header) and halt if conditional{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# GET matches. The +value+ argument is an identifier that uniquely{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# identifies the current version of the resource. The +kind+ argument{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# indicates whether the etag should be used as a :strong (default) or :weak{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# cache validator.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# When the current request includes an 'If-None-Match' header with a{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# matching etag, execution is immediately halted. If the request method is{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# GET or HEAD, a '304 Not Modified' response is sent.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}etag{/call:Kadet\Highlighter\Parser\Token\Token}(value, options = {})
      {comment:Kadet\Highlighter\Parser\Token\Token}# Before touching this code, please double check RFC 2616 14.24 and 14.26.{/comment:Kadet\Highlighter\Parser\Token\Token}
      options      = {{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:kind{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => options} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} Hash === {call:Kadet\Highlighter\Parser\Token\Token}options{/call:Kadet\Highlighter\Parser\Token\Token}
      kind         = options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:kind{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] || {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:strong{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      new_resource = options.{call:Kadet\Highlighter\Parser\Token\Token}fetch{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:new_resource{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) { request.post? }

      {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} [{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:strong{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:weak{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}].{call:Kadet\Highlighter\Parser\Token\Token}include?{/call:Kadet\Highlighter\Parser\Token\Token}(kind)
        {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} ArgumentError, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}":strong or :weak expected"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      value = {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'"%s"'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} % value
      value = {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'W/'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} + value {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} kind == {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:weak{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'ETag'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = {call:Kadet\Highlighter\Parser\Token\Token}value{/call:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} success? {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} status == {number:Kadet\Highlighter\Parser\Token\Token}304{/number:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} etag_matches? env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP_IF_NONE_MATCH'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}], new_resource
          {call:Kadet\Highlighter\Parser\Token\Token}halt{/call:Kadet\Highlighter\Parser\Token\Token}(request.safe? ? {number:Kadet\Highlighter\Parser\Token\Token}304{/number:Kadet\Highlighter\Parser\Token\Token} : {number:Kadet\Highlighter\Parser\Token\Token}412{/number:Kadet\Highlighter\Parser\Token\Token})
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP_IF_MATCH'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]
          {call:Kadet\Highlighter\Parser\Token\Token}halt{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}412{/number:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} etag_matches? env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HTTP_IF_MATCH'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}], new_resource
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Sugar for redirect (example:  redirect back){/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}back{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      request.{call:Kadet\Highlighter\Parser\Token\Token}referer{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# whether or not the status is set to 1xx{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}informational{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?
      status.{call:Kadet\Highlighter\Parser\Token\Token}between?{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}100{/number:Kadet\Highlighter\Parser\Token\Token}, {number:Kadet\Highlighter\Parser\Token\Token}199{/number:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# whether or not the status is set to 2xx{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}success{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?
      status.{call:Kadet\Highlighter\Parser\Token\Token}between?{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}200{/number:Kadet\Highlighter\Parser\Token\Token}, {number:Kadet\Highlighter\Parser\Token\Token}299{/number:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# whether or not the status is set to 3xx{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}redirect{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?
      status.{call:Kadet\Highlighter\Parser\Token\Token}between?{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}300{/number:Kadet\Highlighter\Parser\Token\Token}, {number:Kadet\Highlighter\Parser\Token\Token}399{/number:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# whether or not the status is set to 4xx{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}client_error{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?
      status.{call:Kadet\Highlighter\Parser\Token\Token}between?{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}400{/number:Kadet\Highlighter\Parser\Token\Token}, {number:Kadet\Highlighter\Parser\Token\Token}499{/number:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# whether or not the status is set to 5xx{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}server_error{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?
      status.{call:Kadet\Highlighter\Parser\Token\Token}between?{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}500{/number:Kadet\Highlighter\Parser\Token\Token}, {number:Kadet\Highlighter\Parser\Token\Token}599{/number:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# whether or not the status is set to 404{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}not_found{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?
      status == {number:Kadet\Highlighter\Parser\Token\Token}404{/number:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Generates a Time object from the given value.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# Used by #expires and #last_modified.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}time_for{/call:Kadet\Highlighter\Parser\Token\Token}(value)
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} value.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:to_time{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
        value.{call:Kadet\Highlighter\Parser\Token\Token}to_time{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} value.is_a? Time
        {call:Kadet\Highlighter\Parser\Token\Token}value{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} value.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:new_offset{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
        {comment:Kadet\Highlighter\Parser\Token\Token}# DateTime#to_time does the same on 1.9{/comment:Kadet\Highlighter\Parser\Token\Token}
        d = value.{call:Kadet\Highlighter\Parser\Token\Token}new_offset{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}0{/number:Kadet\Highlighter\Parser\Token\Token}
        t = Time.{call:Kadet\Highlighter\Parser\Token\Token}utc{/call:Kadet\Highlighter\Parser\Token\Token} d.year, d.mon, d.mday, d.hour, d.min, d.sec + d.sec_fraction
        t.{call:Kadet\Highlighter\Parser\Token\Token}getlocal{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} value.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:mday{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
        {comment:Kadet\Highlighter\Parser\Token\Token}# Date#to_time does the same on 1.9{/comment:Kadet\Highlighter\Parser\Token\Token}
        Time.{call:Kadet\Highlighter\Parser\Token\Token}local{/call:Kadet\Highlighter\Parser\Token\Token}(value.year, value.mon, value.mday)
      {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} value.is_a? Numeric
        Time.{call:Kadet\Highlighter\Parser\Token\Token}at{/call:Kadet\Highlighter\Parser\Token\Token} value
      {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
        Time.{call:Kadet\Highlighter\Parser\Token\Token}parse{/call:Kadet\Highlighter\Parser\Token\Token} value.to_s
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}rescue{/keyword:Kadet\Highlighter\Parser\Token\Token} ArgumentError => boom
      {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} boom
    {keyword:Kadet\Highlighter\Parser\Token\Token}rescue{/keyword:Kadet\Highlighter\Parser\Token\Token} Exception
      {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} ArgumentError, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"unable to convert {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{value.inspect}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken} to a Time object"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Helper method checking if a ETag value list includes the current ETag.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}etag_matches?{/call:Kadet\Highlighter\Parser\Token\Token}(list, new_resource = request.post?)
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} !new_resource {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} list == {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'*'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      list.to_s.{call:Kadet\Highlighter\Parser\Token\Token}split{/call:Kadet\Highlighter\Parser\Token\Token}({string.regex:Kadet\Highlighter\Parser\Token\Token}/{operator.escape:Kadet\Highlighter\Parser\Token\Token}\s{/operator.escape:Kadet\Highlighter\Parser\Token\Token}*,{operator.escape:Kadet\Highlighter\Parser\Token\Token}\s{/operator.escape:Kadet\Highlighter\Parser\Token\Token}*/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}).include? response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'ETag'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}with_params{/call:Kadet\Highlighter\Parser\Token\Token}(temp_params)
      original, {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token}, temp_params
      {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}ensure{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {call:Kadet\Highlighter\Parser\Token\Token}original{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} or{call:Kadet\Highlighter\Parser\Token\Token}iginal{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Template rendering methods. Each method takes the name of a template{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# to render as a Symbol and returns a String with the rendered output,{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# as well as an optional hash with additional options.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# `template` is either the name or path of the template as symbol{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# (Use `:'subdir/myview'` for views in subdirectories), or a string{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# that will be rendered.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# Possible options are:{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#   :content_type   The content type to use, same arguments as content_type.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#   :layout         If set to false, no layout is rendered, otherwise{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#                   the specified layout is used (Ignored for `sass` and `less`){/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#   :layout_engine  Engine to use for rendering the layout.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#   :locals         A hash with local variables that should be available{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#                   in the template{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#   :scope          If set, template is evaluate with the binding of the given{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#                   object rather than the application instance.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#   :views          Views directory to use.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}module{/keyword:Kadet\Highlighter\Parser\Token\Token} Templates
    {keyword:Kadet\Highlighter\Parser\Token\Token}module{/keyword:Kadet\Highlighter\Parser\Token\Token} ContentTyped
      {call:Kadet\Highlighter\Parser\Token\Token}attr_accessor{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}initialize{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}super{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@default_layout{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}erb{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:erb{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}erubis{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      {call:Kadet\Highlighter\Parser\Token\Token}warn{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"Sinatra::Templates#erubis is deprecated and will be removed, use #erb instead.{operator.escape:Kadet\Highlighter\Parser\Token\Token}\n{/operator.escape:Kadet\Highlighter\Parser\Token\Token}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} \
        {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"If you have Erubis installed, it will be used automatically."{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:erubis{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}haml{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:haml{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}sass{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      options.{call:Kadet\Highlighter\Parser\Token\Token}merge!{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default_content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:css{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:sass{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}scss{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      options.{call:Kadet\Highlighter\Parser\Token\Token}merge!{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default_content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:css{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:scss{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}less{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      options.{call:Kadet\Highlighter\Parser\Token\Token}merge!{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default_content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:css{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:less{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}builder{/call:Kadet\Highlighter\Parser\Token\Token}(template={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}, options={}, locals={}, &block)
      options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default_content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] = {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:xml{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}render_ruby{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:builder{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals, &block)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}liquid{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:liquid{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}markdown{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:markdown{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}textile{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:textile{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}rdoc{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:rdoc{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}radius{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:radius{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}markaby{/call:Kadet\Highlighter\Parser\Token\Token}(template={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}, options={}, locals={}, &block)
      {call:Kadet\Highlighter\Parser\Token\Token}render_ruby{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:mab{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals, &block)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}coffee{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      options.{call:Kadet\Highlighter\Parser\Token\Token}merge!{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default_content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:js{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:coffee{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}nokogiri{/call:Kadet\Highlighter\Parser\Token\Token}(template={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}, options={}, locals={}, &block)
      options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default_content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] = {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:xml{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}render_ruby{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:nokogiri{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals, &block)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}slim{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:slim{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}creole{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:creole{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}yajl{/call:Kadet\Highlighter\Parser\Token\Token}(template, options={}, locals={})
      options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default_content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] = {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:json{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:yajl{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Calls the given block for every possible template file in views,{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# named name.ext, where ext is registered on engine.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}find_template{/call:Kadet\Highlighter\Parser\Token\Token}(views, name, engine)
      {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token} ::{constant:Kadet\Highlighter\Parser\Token\Token}File{/constant:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}(views, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{name}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}.{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{{variable.property:Kadet\Highlighter\Parser\Token\Token}@preferred_extension{/variable.property:Kadet\Highlighter\Parser\Token\Token}}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken})
      Tilt.mappings.each {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |ext, engines|
        {keyword:Kadet\Highlighter\Parser\Token\Token}next{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} ext != {variable.property:Kadet\Highlighter\Parser\Token\Token}@preferred_extension{/variable.property:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} engines.{call:Kadet\Highlighter\Parser\Token\Token}include?{/call:Kadet\Highlighter\Parser\Token\Token} engine
        {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token} ::{constant:Kadet\Highlighter\Parser\Token\Token}File{/constant:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}(views, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{name}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}.{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{ext}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken})
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# logic shared between builder and nokogiri{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}render_ruby{/call:Kadet\Highlighter\Parser\Token\Token}(engine, template, options={}, locals={}, &block)
      options, template = template, {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} template.{call:Kadet\Highlighter\Parser\Token\Token}is_a?{/call:Kadet\Highlighter\Parser\Token\Token}(Hash)
      template = Proc.new { block } {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} template.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}?
      {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token} engine, template, options, locals
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token}(engine, data, options={}, locals={}, &block)
      {comment:Kadet\Highlighter\Parser\Token\Token}# merge app-level options{/comment:Kadet\Highlighter\Parser\Token\Token}
      options = settings.{call:Kadet\Highlighter\Parser\Token\Token}send{/call:Kadet\Highlighter\Parser\Token\Token}(engine).{call:Kadet\Highlighter\Parser\Token\Token}merge{/call:Kadet\Highlighter\Parser\Token\Token}(options) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}(engine)
      options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:outvar{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}]           ||= {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'@_out_buf'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default_encoding{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] ||= settings.{call:Kadet\Highlighter\Parser\Token\Token}default_encoding{/call:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# extract generic options{/comment:Kadet\Highlighter\Parser\Token\Token}
      locals          = options.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:locals{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) || locals         || {}
      views           = options.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:views{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})  || settings.views || {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"./views"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
      layout          = options.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
      eat_errors      = layout.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}?
      layout          = {variable.property:Kadet\Highlighter\Parser\Token\Token}@default_layout{/variable.property:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} layout.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}? {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} layout == {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}
      content_type    = options.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})  || options.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default_content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
      layout_engine   = options.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout_engine{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) || {call:Kadet\Highlighter\Parser\Token\Token}engine{/call:Kadet\Highlighter\Parser\Token\Token}
      scope           = options.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:scope{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})         || {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# compile and render template{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}begin{/keyword:Kadet\Highlighter\Parser\Token\Token}
        layout_was      = {variable.property:Kadet\Highlighter\Parser\Token\Token}@default_layout{/variable.property:Kadet\Highlighter\Parser\Token\Token}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@default_layout{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
        template        = {call:Kadet\Highlighter\Parser\Token\Token}compile_template{/call:Kadet\Highlighter\Parser\Token\Token}(engine, data, options, views)
        output          = template.{call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token}(scope, locals, &block)
      {keyword:Kadet\Highlighter\Parser\Token\Token}ensure{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@default_layout{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {call:Kadet\Highlighter\Parser\Token\Token}layout_was{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# render layout{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} layout
        options = options.{call:Kadet\Highlighter\Parser\Token\Token}merge{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:views{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => views, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:eat_errors{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => eat_errors, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:scope{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => scope)
        {call:Kadet\Highlighter\Parser\Token\Token}catch{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout_missing{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) { {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}render{/call:Kadet\Highlighter\Parser\Token\Token}(layout_engine, layout, options, locals) { output } }
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      output.{call:Kadet\Highlighter\Parser\Token\Token}extend{/call:Kadet\Highlighter\Parser\Token\Token}(ContentTyped).content_type = {call:Kadet\Highlighter\Parser\Token\Token}content_type{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} content_type
      {call:Kadet\Highlighter\Parser\Token\Token}output{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}compile_template{/call:Kadet\Highlighter\Parser\Token\Token}(engine, data, options, views)
      eat_errors = options.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:eat_errors{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      template_cache.{call:Kadet\Highlighter\Parser\Token\Token}fetch{/call:Kadet\Highlighter\Parser\Token\Token} engine, data, options {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
        template = Tilt[engine]
        {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"Template engine not found: {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{engine}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} template.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}?

        {keyword:Kadet\Highlighter\Parser\Token\Token}case{/keyword:Kadet\Highlighter\Parser\Token\Token} data
        {keyword:Kadet\Highlighter\Parser\Token\Token}when{/keyword:Kadet\Highlighter\Parser\Token\Token} Symbol
          body, path, line = settings.templates[data]
          {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} body
            body = body.{call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} body.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:call{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
            template.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}(path, line.to_i, options) { body }
          {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
            found = {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
            {variable.property:Kadet\Highlighter\Parser\Token\Token}@preferred_extension{/variable.property:Kadet\Highlighter\Parser\Token\Token} = engine.{call:Kadet\Highlighter\Parser\Token\Token}to_s{/call:Kadet\Highlighter\Parser\Token\Token}
            {call:Kadet\Highlighter\Parser\Token\Token}find_template{/call:Kadet\Highlighter\Parser\Token\Token}(views, data, template) {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |file|
              path ||= file {comment:Kadet\Highlighter\Parser\Token\Token}# keep the initial path rather than the last one{/comment:Kadet\Highlighter\Parser\Token\Token}
              {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} found = File.{call:Kadet\Highlighter\Parser\Token\Token}exists?{/call:Kadet\Highlighter\Parser\Token\Token}(file)
                path = {call:Kadet\Highlighter\Parser\Token\Token}file{/call:Kadet\Highlighter\Parser\Token\Token}
                {keyword:Kadet\Highlighter\Parser\Token\Token}break{/keyword:Kadet\Highlighter\Parser\Token\Token}
              {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
            {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
            {call:Kadet\Highlighter\Parser\Token\Token}throw{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout_missing{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} eat_error{call:Kadet\Highlighter\Parser\Token\Token}s{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}not{/keyword:Kadet\Highlighter\Parser\Token\Token} found
            template.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}(path, {number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}, options)
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}when{/keyword:Kadet\Highlighter\Parser\Token\Token} Proc, String
          body = data.{call:Kadet\Highlighter\Parser\Token\Token}is_a?{/call:Kadet\Highlighter\Parser\Token\Token}(String) ? Proc.new { data } : data
          path, line = settings.caller_locations.first
          template.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}(path, line.to_i, options, &body)
        {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} ArgumentError, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"Sorry, don't know how to render {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{data.inspect}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}."{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Base class for all Sinatra applications and middleware.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Base{/symbol.class:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}include{/call:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Utils{/constant:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}include{/call:Kadet\Highlighter\Parser\Token\Token} Helpers
    {call:Kadet\Highlighter\Parser\Token\Token}include{/call:Kadet\Highlighter\Parser\Token\Token} Templates

    {call:Kadet\Highlighter\Parser\Token\Token}attr_accessor{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:app{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}attr_reader{/call:Kadet\Highlighter\Parser\Token\Token}   {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:template_cache{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}initialize{/call:Kadet\Highlighter\Parser\Token\Token}(app={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token})
      {call:Kadet\Highlighter\Parser\Token\Token}super{/call:Kadet\Highlighter\Parser\Token\Token}()
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@app{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {call:Kadet\Highlighter\Parser\Token\Token}app{/call:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@template_cache{/variable.property:Kadet\Highlighter\Parser\Token\Token} = Tilt::{constant:Kadet\Highlighter\Parser\Token\Token}Cache{/constant:Kadet\Highlighter\Parser\Token\Token}.new
      {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} block_given?
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Rack call interface.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(env)
      dup.{call:Kadet\Highlighter\Parser\Token\Token}call!{/call:Kadet\Highlighter\Parser\Token\Token}(env)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}attr_accessor{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:env{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:request{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:response{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:params{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}call!{/call:Kadet\Highlighter\Parser\Token\Token}(env) {comment:Kadet\Highlighter\Parser\Token\Token}# :nodoc:{/comment:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@env{/variable.property:Kadet\Highlighter\Parser\Token\Token}      = {call:Kadet\Highlighter\Parser\Token\Token}env{/call:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@request{/variable.property:Kadet\Highlighter\Parser\Token\Token}  = Request.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}(env)
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@response{/variable.property:Kadet\Highlighter\Parser\Token\Token} = Response.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token}   = {call:Kadet\Highlighter\Parser\Token\Token}indifferent_params{/call:Kadet\Highlighter\Parser\Token\Token}({variable.property:Kadet\Highlighter\Parser\Token\Token}@request{/variable.property:Kadet\Highlighter\Parser\Token\Token}.params)
      template_cache.{call:Kadet\Highlighter\Parser\Token\Token}clear{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.reload_templates
      {call:Kadet\Highlighter\Parser\Token\Token}force_encoding{/call:Kadet\Highlighter\Parser\Token\Token}({variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token})

      {variable.property:Kadet\Highlighter\Parser\Token\Token}@response{/variable.property:Kadet\Highlighter\Parser\Token\Token}[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Type'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}
      invoke { dispatch! }
      invoke { {call:Kadet\Highlighter\Parser\Token\Token}error_block!{/call:Kadet\Highlighter\Parser\Token\Token}(response.status) }

      {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} {variable.property:Kadet\Highlighter\Parser\Token\Token}@response{/variable.property:Kadet\Highlighter\Parser\Token\Token}[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Type'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]
        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} Array === {call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} body[{number:Kadet\Highlighter\Parser\Token\Token}0{/number:Kadet\Highlighter\Parser\Token\Token}].respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:content_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
          {call:Kadet\Highlighter\Parser\Token\Token}content_type{/call:Kadet\Highlighter\Parser\Token\Token} body[{number:Kadet\Highlighter\Parser\Token\Token}0{/number:Kadet\Highlighter\Parser\Token\Token}].content_type
        {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {call:Kadet\Highlighter\Parser\Token\Token}content_type{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:html{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {variable.property:Kadet\Highlighter\Parser\Token\Token}@response{/variable.property:Kadet\Highlighter\Parser\Token\Token}.finish
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Access settings defined with Base.set.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{symbol.function:Kadet\Highlighter\Parser\Token\Token}settings{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Access settings defined with Base.set.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}settings{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token}.settings
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}options{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}warn{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"Sinatra::Base#options is deprecated and will be removed, "{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} \
        {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"use #settings instead."{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
      {call:Kadet\Highlighter\Parser\Token\Token}settings{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Exit the current block, halts any further processing{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# of the request, and returns the specified response.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}halt{/call:Kadet\Highlighter\Parser\Token\Token}(*response)
      response = response.{call:Kadet\Highlighter\Parser\Token\Token}first{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} response.length == {number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}throw{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:halt{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, response
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Pass control to the next matching route.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# If there are no more matching routes, Sinatra will{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# return a 404 response.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}pass{/call:Kadet\Highlighter\Parser\Token\Token}(&block)
      {call:Kadet\Highlighter\Parser\Token\Token}throw{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:pass{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, block
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Forward the request to the downstream app -- middleware only.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}forward{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}fail{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"downstream app not set"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} {variable.property:Kadet\Highlighter\Parser\Token\Token}@app{/variable.property:Kadet\Highlighter\Parser\Token\Token}.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:call{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      status, headers, body = {variable.property:Kadet\Highlighter\Parser\Token\Token}@app{/variable.property:Kadet\Highlighter\Parser\Token\Token}.call env
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@response{/variable.property:Kadet\Highlighter\Parser\Token\Token}.status = {call:Kadet\Highlighter\Parser\Token\Token}status{/call:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@response{/variable.property:Kadet\Highlighter\Parser\Token\Token}.body = {call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@response{/variable.property:Kadet\Highlighter\Parser\Token\Token}.headers.merge! headers
      {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# Run filters defined on the class and all superclasses.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}filter!{/call:Kadet\Highlighter\Parser\Token\Token}(type, base = settings)
      {call:Kadet\Highlighter\Parser\Token\Token}filter!{/call:Kadet\Highlighter\Parser\Token\Token} type, base.superclass {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} base.superclass.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:filters{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
      base.filters[type].each { |args| {call:Kadet\Highlighter\Parser\Token\Token}process_route{/call:Kadet\Highlighter\Parser\Token\Token}(*args) }
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Run routes defined on the class and all superclasses.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}route!{/call:Kadet\Highlighter\Parser\Token\Token}(base = settings, pass_block={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token})
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} routes = base.routes[{variable.property:Kadet\Highlighter\Parser\Token\Token}@request{/variable.property:Kadet\Highlighter\Parser\Token\Token}.request_method]
        routes.{call:Kadet\Highlighter\Parser\Token\Token}each{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |pattern, keys, conditions, block|
          pass_block = {call:Kadet\Highlighter\Parser\Token\Token}process_route{/call:Kadet\Highlighter\Parser\Token\Token}(pattern, keys, conditions) {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |*args|
            route_eval { block[*args] }
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Run routes defined in superclass.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} base.superclass.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:routes{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
        {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}route!{/call:Kadet\Highlighter\Parser\Token\Token}(base.superclass, pass_block)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {call:Kadet\Highlighter\Parser\Token\Token}route_eval{/call:Kadet\Highlighter\Parser\Token\Token}(&pass_block) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} pass_block
      {call:Kadet\Highlighter\Parser\Token\Token}route_missing{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Run a route block and throw :halt with the result.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}route_eval{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}throw{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:halt{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# If the current request matches pattern and conditions, fill params{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# with keys and call the given block.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# Revert params afterwards.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# Returns pass block.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}process_route{/call:Kadet\Highlighter\Parser\Token\Token}(pattern, keys, conditions, block = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}, values = [])
      route = {variable.property:Kadet\Highlighter\Parser\Token\Token}@request{/variable.property:Kadet\Highlighter\Parser\Token\Token}.path_info
      route = {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'/'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} route.empty? {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}not{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.empty_path_info?
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} match = pattern.{call:Kadet\Highlighter\Parser\Token\Token}match{/call:Kadet\Highlighter\Parser\Token\Token}(route)
      values += match.captures.to_a.map { |v| for{call:Kadet\Highlighter\Parser\Token\Token}ce_encoding{/call:Kadet\Highlighter\Parser\Token\Token} URI.{call:Kadet\Highlighter\Parser\Token\Token}decode_www_form_component{/call:Kadet\Highlighter\Parser\Token\Token}(v) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} v }

      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} values.any?
        original, {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token} = params, params.{call:Kadet\Highlighter\Parser\Token\Token}merge{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'splat'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => [], {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'captures'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => values)
        keys.{call:Kadet\Highlighter\Parser\Token\Token}zip{/call:Kadet\Highlighter\Parser\Token\Token}(values) { |k,v| Array === {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token}[k] ? {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token}[k] << v : {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token}[k] = {call:Kadet\Highlighter\Parser\Token\Token}v{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} v }
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {call:Kadet\Highlighter\Parser\Token\Token}catch{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:pass{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
        conditions.each { |c| throw {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:pass{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} c.{call:Kadet\Highlighter\Parser\Token\Token}bind{/call:Kadet\Highlighter\Parser\Token\Token}({constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}).call == {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token} }
        block ? block[{constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}, values] : {call:Kadet\Highlighter\Parser\Token\Token}yield{/call:Kadet\Highlighter\Parser\Token\Token}({constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}, values)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}ensure{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {call:Kadet\Highlighter\Parser\Token\Token}original{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} or{call:Kadet\Highlighter\Parser\Token\Token}iginal{/call:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# No matching route was found or all routes passed. The default{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# implementation is to forward the request downstream when running{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# as middleware (@app is non-nil); when no downstream app is set, raise{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# a NotFound exception. Subclasses can override this method to perform{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# custom route miss logic.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}route_missing{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} {variable.property:Kadet\Highlighter\Parser\Token\Token}@app{/variable.property:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}forward{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} NotFound
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Attempt to serve static files from public directory. Throws :halt when{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# a matching file is found, returns nil otherwise.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}static{/symbol.function:Kadet\Highlighter\Parser\Token\Token}!
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}if{/call:Kadet\Highlighter\Parser\Token\Token} (public_dir = settings.public_folder).{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}?
      public_dir = File.{call:Kadet\Highlighter\Parser\Token\Token}expand_path{/call:Kadet\Highlighter\Parser\Token\Token}(public_dir)

      path = File.{call:Kadet\Highlighter\Parser\Token\Token}expand_path{/call:Kadet\Highlighter\Parser\Token\Token}(public_dir + {call:Kadet\Highlighter\Parser\Token\Token}unescape{/call:Kadet\Highlighter\Parser\Token\Token}(request.path_info))
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} path.{call:Kadet\Highlighter\Parser\Token\Token}start_with?{/call:Kadet\Highlighter\Parser\Token\Token}(public_dir) {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} File.{call:Kadet\Highlighter\Parser\Token\Token}file?{/call:Kadet\Highlighter\Parser\Token\Token}(path)

      env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'sinatra.static_file'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = {call:Kadet\Highlighter\Parser\Token\Token}path{/call:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}cache_control{/call:Kadet\Highlighter\Parser\Token\Token}(*settings.static_cache_control) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.static_cache_control?
      {call:Kadet\Highlighter\Parser\Token\Token}send_file{/call:Kadet\Highlighter\Parser\Token\Token} path, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:disposition{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Enable string or symbol key access to the nested params hash.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}indifferent_params{/call:Kadet\Highlighter\Parser\Token\Token}(object)
      {keyword:Kadet\Highlighter\Parser\Token\Token}case{/keyword:Kadet\Highlighter\Parser\Token\Token} object
      {keyword:Kadet\Highlighter\Parser\Token\Token}when{/keyword:Kadet\Highlighter\Parser\Token\Token} Hash
        new_hash = {call:Kadet\Highlighter\Parser\Token\Token}indifferent_hash{/call:Kadet\Highlighter\Parser\Token\Token}
        object.each { |key, value| new_hash[key] = {call:Kadet\Highlighter\Parser\Token\Token}indifferent_params{/call:Kadet\Highlighter\Parser\Token\Token}(value) }
        {call:Kadet\Highlighter\Parser\Token\Token}new_hash{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}when{/keyword:Kadet\Highlighter\Parser\Token\Token} Array
        object.map { |item| {call:Kadet\Highlighter\Parser\Token\Token}indifferent_params{/call:Kadet\Highlighter\Parser\Token\Token}(item) }
      {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}object{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Creates a Hash with indifferent access.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}indifferent_hash{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      Hash.new {|hash,key| hash[key.to_s] {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} Symbol === key }
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Run the block with 'throw :halt' support and apply result to the response.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}invoke{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      res = {call:Kadet\Highlighter\Parser\Token\Token}catch{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:halt{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) { {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token} }
      res = [res] {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} Fixnum === {call:Kadet\Highlighter\Parser\Token\Token}res{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} String === {call:Kadet\Highlighter\Parser\Token\Token}res{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} Array === {call:Kadet\Highlighter\Parser\Token\Token}res{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} Fixnum === res.{call:Kadet\Highlighter\Parser\Token\Token}first{/call:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}status{/call:Kadet\Highlighter\Parser\Token\Token}(res.shift)
        {call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token}(res.pop)
        {call:Kadet\Highlighter\Parser\Token\Token}headers{/call:Kadet\Highlighter\Parser\Token\Token}(*res)
      {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} res.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:each{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token} res
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token} {comment:Kadet\Highlighter\Parser\Token\Token}# avoid double setting the same response tuple twice{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Dispatch a request with error handling.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}dispatch{/symbol.function:Kadet\Highlighter\Parser\Token\Token}!
      {call:Kadet\Highlighter\Parser\Token\Token}invoke{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}static!{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.static? && (request.get? || request.head?)
        {call:Kadet\Highlighter\Parser\Token\Token}filter!{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:before{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}route!{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}rescue{/keyword:Kadet\Highlighter\Parser\Token\Token} ::{constant:Kadet\Highlighter\Parser\Token\Token}Exception{/constant:Kadet\Highlighter\Parser\Token\Token} => boom
      invoke { {call:Kadet\Highlighter\Parser\Token\Token}handle_exception!{/call:Kadet\Highlighter\Parser\Token\Token}(boom) }
    {keyword:Kadet\Highlighter\Parser\Token\Token}ensure{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}filter!{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:after{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} env[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'sinatra.static_file'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Error handling during requests.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}handle_exception!{/call:Kadet\Highlighter\Parser\Token\Token}(boom)
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@env{/variable.property:Kadet\Highlighter\Parser\Token\Token}[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'sinatra.error'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = {call:Kadet\Highlighter\Parser\Token\Token}boom{/call:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} boom.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:http_status{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}status{/call:Kadet\Highlighter\Parser\Token\Token}(boom.http_status)
      {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.use_code? {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} boom.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:code{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} boom.code.between? {number:Kadet\Highlighter\Parser\Token\Token}400{/number:Kadet\Highlighter\Parser\Token\Token}, {number:Kadet\Highlighter\Parser\Token\Token}599{/number:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}status{/call:Kadet\Highlighter\Parser\Token\Token}(boom.code)
      {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}status{/call:Kadet\Highlighter\Parser\Token\Token}({number:Kadet\Highlighter\Parser\Token\Token}500{/number:Kadet\Highlighter\Parser\Token\Token})
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {call:Kadet\Highlighter\Parser\Token\Token}status{/call:Kadet\Highlighter\Parser\Token\Token}({number:Kadet\Highlighter\Parser\Token\Token}500{/number:Kadet\Highlighter\Parser\Token\Token}) {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} status.between? {number:Kadet\Highlighter\Parser\Token\Token}400{/number:Kadet\Highlighter\Parser\Token\Token}, {number:Kadet\Highlighter\Parser\Token\Token}599{/number:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} server_error?
        {call:Kadet\Highlighter\Parser\Token\Token}dump_errors!{/call:Kadet\Highlighter\Parser\Token\Token} boom {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.dump_error{call:Kadet\Highlighter\Parser\Token\Token}s?{/call:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} boom {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.show_exceptions? {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.show_exceptions != {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:after_handler{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} not_found?
        headers[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'X-Cascade'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] = {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'pass'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
        {call:Kadet\Highlighter\Parser\Token\Token}body{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'<h1>Not Found</h1>'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      res = {call:Kadet\Highlighter\Parser\Token\Token}error_block!{/call:Kadet\Highlighter\Parser\Token\Token}(boom.{keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token}, boom) || {call:Kadet\Highlighter\Parser\Token\Token}error_block!{/call:Kadet\Highlighter\Parser\Token\Token}(status, boom)
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} res {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} res {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}not{/keyword:Kadet\Highlighter\Parser\Token\Token} server_error?
      {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} boom {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.raise_error{call:Kadet\Highlighter\Parser\Token\Token}s?{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} settings.{call:Kadet\Highlighter\Parser\Token\Token}show_exceptions?{/call:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}error_block!{/call:Kadet\Highlighter\Parser\Token\Token} Exception, boom
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Find an custom error block for the key(s) specified.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}error_block!{/call:Kadet\Highlighter\Parser\Token\Token}(key, *block_params)
      base = {call:Kadet\Highlighter\Parser\Token\Token}settings{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}while{/keyword:Kadet\Highlighter\Parser\Token\Token} base.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:errors{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
        {keyword:Kadet\Highlighter\Parser\Token\Token}next{/keyword:Kadet\Highlighter\Parser\Token\Token} base = base.{call:Kadet\Highlighter\Parser\Token\Token}superclass{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} args_array = base.errors[key]
        args_array.{call:Kadet\Highlighter\Parser\Token\Token}reverse_each{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |args|
          first = args == args_array.{call:Kadet\Highlighter\Parser\Token\Token}first{/call:Kadet\Highlighter\Parser\Token\Token}
          args += [block_params]
          resp = {call:Kadet\Highlighter\Parser\Token\Token}process_route{/call:Kadet\Highlighter\Parser\Token\Token}(*args)
          {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} resp {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} resp.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}? && !first
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} key.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:superclass{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} key.superclass < Exception
      {call:Kadet\Highlighter\Parser\Token\Token}error_block!{/call:Kadet\Highlighter\Parser\Token\Token}(key.superclass, *block_params)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}dump_errors!{/call:Kadet\Highlighter\Parser\Token\Token}(boom)
      msg = [{string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{boom.{keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token}}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken} - {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{boom.message}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}:"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}, *boom.backtrace].{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}({string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{operator.escape:Kadet\Highlighter\Parser\Token\Token}\n{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\t{/operator.escape:Kadet\Highlighter\Parser\Token\Token}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken})
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@env{/variable.property:Kadet\Highlighter\Parser\Token\Token}[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'rack.errors'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}].{call:Kadet\Highlighter\Parser\Token\Token}puts{/call:Kadet\Highlighter\Parser\Token\Token}(msg)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} << {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}attr_reader{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:routes{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:filters{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:templates{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:errors{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Removes all routes, filters, middleware and extension hooks from the{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# current class (not routes/filters/... defined by its superclass).{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}reset{/symbol.function:Kadet\Highlighter\Parser\Token\Token}!
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@conditions{/variable.property:Kadet\Highlighter\Parser\Token\Token}     = []
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@routes{/variable.property:Kadet\Highlighter\Parser\Token\Token}         = {}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@filters{/variable.property:Kadet\Highlighter\Parser\Token\Token}        = {{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:before{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => [], {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:after{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => []}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@errors{/variable.property:Kadet\Highlighter\Parser\Token\Token}         = {}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@middleware{/variable.property:Kadet\Highlighter\Parser\Token\Token}     = []
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@prototype{/variable.property:Kadet\Highlighter\Parser\Token\Token}      = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@extensions{/variable.property:Kadet\Highlighter\Parser\Token\Token}     = []

        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} superclass.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:templates{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
          {variable.property:Kadet\Highlighter\Parser\Token\Token}@templates{/variable.property:Kadet\Highlighter\Parser\Token\Token} = Hash.new { |hash,key| superclass.templates[key] }
        {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {variable.property:Kadet\Highlighter\Parser\Token\Token}@templates{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Extension modules registered on this class and all superclasses.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}extensions{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} superclass.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:extensions{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
          ({variable.property:Kadet\Highlighter\Parser\Token\Token}@extensions{/variable.property:Kadet\Highlighter\Parser\Token\Token} + superclass.extensions).uniq
        {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {variable.property:Kadet\Highlighter\Parser\Token\Token}@extensions{/variable.property:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Middleware used in this class and all superclasses.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}middleware{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} superclass.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:middleware{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
          superclass.middleware + {variable.property:Kadet\Highlighter\Parser\Token\Token}@middleware{/variable.property:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {variable.property:Kadet\Highlighter\Parser\Token\Token}@middleware{/variable.property:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Sets an option to the given value.  If the value is a proc,{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# the proc will be called every time the option is accessed.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token}(option, value = (not_set = {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}), ignore_setter = {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}, &block)
        {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} ArgumentError {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} block {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} !not_set
        value, not_set = block, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} block

        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} not_set
          {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} ArgumentError {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} option.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:each{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
          option.each { |k,v| {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token}(k, v) }
          {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{option}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}="{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}) {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}not{/keyword:Kadet\Highlighter\Parser\Token\Token} ignor{call:Kadet\Highlighter\Parser\Token\Token}e_setter{/call:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} __{call:Kadet\Highlighter\Parser\Token\Token}send__{/call:Kadet\Highlighter\Parser\Token\Token}({string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{option}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}="{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}, value)
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

        setter = proc { |val| set option, val, {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token} }
        getter = proc { value }

        {keyword:Kadet\Highlighter\Parser\Token\Token}case{/keyword:Kadet\Highlighter\Parser\Token\Token} value
        {keyword:Kadet\Highlighter\Parser\Token\Token}when{/keyword:Kadet\Highlighter\Parser\Token\Token} Proc
          getter = {call:Kadet\Highlighter\Parser\Token\Token}value{/call:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}when{/keyword:Kadet\Highlighter\Parser\Token\Token} Symbol, Fixnum, FalseClass, TrueClass, NilClass
          {symbol.class:Kadet\Highlighter\Parser\Token\Token}getter{/symbol.class:Kadet\Highlighter\Parser\Token\Token} = value.{call:Kadet\Highlighter\Parser\Token\Token}inspect{/call:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}when{/keyword:Kadet\Highlighter\Parser\Token\Token} Hash
          setter = {call:Kadet\Highlighter\Parser\Token\Token}proc{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |val|
            val = value.{call:Kadet\Highlighter\Parser\Token\Token}merge{/call:Kadet\Highlighter\Parser\Token\Token} val {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} Hash === {call:Kadet\Highlighter\Parser\Token\Token}val{/call:Kadet\Highlighter\Parser\Token\Token}
            {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} option, val, {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

        {call:Kadet\Highlighter\Parser\Token\Token}define_singleton_method{/call:Kadet\Highlighter\Parser\Token\Token}({string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{option}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}="{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}, setter) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} setter
        {call:Kadet\Highlighter\Parser\Token\Token}define_singleton_method{/call:Kadet\Highlighter\Parser\Token\Token}(option, getter) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} getter
        {call:Kadet\Highlighter\Parser\Token\Token}define_singleton_method{/call:Kadet\Highlighter\Parser\Token\Token}({string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{option}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}?"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"!!{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{option}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}) {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} method_defined? {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{option}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}?"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
        {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Same as calling `set :option, true` for each of the given options.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}enable{/call:Kadet\Highlighter\Parser\Token\Token}(*opts)
        opts.each { |key| {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token}(key, {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}) }
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Same as calling `set :option, false` for each of the given options.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}disable{/call:Kadet\Highlighter\Parser\Token\Token}(*opts)
        opts.each { |key| {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token}(key, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}) }
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Define a custom error handler. Optionally takes either an Exception{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# class, or an HTTP status code to specify which errors should be{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# handled.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}error{/call:Kadet\Highlighter\Parser\Token\Token}(*codes, &block)
        args  = {call:Kadet\Highlighter\Parser\Token\Token}compile!{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"ERROR"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}, {string.regex:Kadet\Highlighter\Parser\Token\Token}//{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}, block
        codes = codes.map { |c| {call:Kadet\Highlighter\Parser\Token\Token}Array{/call:Kadet\Highlighter\Parser\Token\Token}(c) }.flatten
        codes << Exception {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} codes.empty?
        codes.each { |c| ({variable.property:Kadet\Highlighter\Parser\Token\Token}@errors{/variable.property:Kadet\Highlighter\Parser\Token\Token}[c] ||= []) << args }
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Sugar for `error(404) { ... }`{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}not_found{/call:Kadet\Highlighter\Parser\Token\Token}(&block)
        {call:Kadet\Highlighter\Parser\Token\Token}error{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}404{/number:Kadet\Highlighter\Parser\Token\Token}, &block
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Define a named template. The block must return the template source.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}template{/call:Kadet\Highlighter\Parser\Token\Token}(name, &block)
        filename, line = caller_locations.{call:Kadet\Highlighter\Parser\Token\Token}first{/call:Kadet\Highlighter\Parser\Token\Token}
        templates[name] = [block, filename, line.to_i]
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Define the layout template. The block must return the template source.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}layout{/call:Kadet\Highlighter\Parser\Token\Token}(name={symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, &block)
        {call:Kadet\Highlighter\Parser\Token\Token}template{/call:Kadet\Highlighter\Parser\Token\Token} name, &block
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Load embeded templates from the file; uses the caller's __FILE__{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# when no file is specified.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}inline_templates{/symbol.function:Kadet\Highlighter\Parser\Token\Token}=(file={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token})
        file = (file.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}? || file == {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}) ? (caller_files.first || File.{call:Kadet\Highlighter\Parser\Token\Token}expand_path{/call:Kadet\Highlighter\Parser\Token\Token}({variable.global:Kadet\Highlighter\Parser\Token\Token}$0{/variable.global:Kadet\Highlighter\Parser\Token\Token})) : file

        {keyword:Kadet\Highlighter\Parser\Token\Token}begin{/keyword:Kadet\Highlighter\Parser\Token\Token}
          io = ::{constant:Kadet\Highlighter\Parser\Token\Token}IO{/constant:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:binread{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) ? ::{constant:Kadet\Highlighter\Parser\Token\Token}IO{/constant:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}binread{/call:Kadet\Highlighter\Parser\Token\Token}(file) : ::{constant:Kadet\Highlighter\Parser\Token\Token}IO{/constant:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}read{/call:Kadet\Highlighter\Parser\Token\Token}(file)
          app, data = io.{call:Kadet\Highlighter\Parser\Token\Token}gsub{/call:Kadet\Highlighter\Parser\Token\Token}({string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{operator.escape:Kadet\Highlighter\Parser\Token\Token}\r{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\n{/operator.escape:Kadet\Highlighter\Parser\Token\Token}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{operator.escape:Kadet\Highlighter\Parser\Token\Token}\n{/operator.escape:Kadet\Highlighter\Parser\Token\Token}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}).{call:Kadet\Highlighter\Parser\Token\Token}split{/call:Kadet\Highlighter\Parser\Token\Token}({string.regex:Kadet\Highlighter\Parser\Token\Token}/^__END__$/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}, {number:Kadet\Highlighter\Parser\Token\Token}2{/number:Kadet\Highlighter\Parser\Token\Token})
        {keyword:Kadet\Highlighter\Parser\Token\Token}rescue{/keyword:Kadet\Highlighter\Parser\Token\Token} Errno::{constant:Kadet\Highlighter\Parser\Token\Token}ENOENT{/constant:Kadet\Highlighter\Parser\Token\Token}
          app, data = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} data
          {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} app {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} app =~ {string.regex:Kadet\Highlighter\Parser\Token\Token}/([^{operator.escape:Kadet\Highlighter\Parser\Token\Token}\n{/operator.escape:Kadet\Highlighter\Parser\Token\Token}]*{operator.escape:Kadet\Highlighter\Parser\Token\Token}\n{/operator.escape:Kadet\Highlighter\Parser\Token\Token})?#[^{operator.escape:Kadet\Highlighter\Parser\Token\Token}\n{/operator.escape:Kadet\Highlighter\Parser\Token\Token}]*coding: *({operator.escape:Kadet\Highlighter\Parser\Token\Token}\S{/operator.escape:Kadet\Highlighter\Parser\Token\Token}+)/m{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}
            encoding = {variable.global:Kadet\Highlighter\Parser\Token\Token}$2{/variable.global:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
            encoding = settings.{call:Kadet\Highlighter\Parser\Token\Token}default_encoding{/call:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
          lines = app.{call:Kadet\Highlighter\Parser\Token\Token}count{/call:Kadet\Highlighter\Parser\Token\Token}({string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{operator.escape:Kadet\Highlighter\Parser\Token\Token}\n{/operator.escape:Kadet\Highlighter\Parser\Token\Token}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}) + {number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}
          template = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}
          {call:Kadet\Highlighter\Parser\Token\Token}force_encoding{/call:Kadet\Highlighter\Parser\Token\Token} data, encoding
          data.{call:Kadet\Highlighter\Parser\Token\Token}each_line{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |line|
            lines += {number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}
            {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} line =~ {string.regex:Kadet\Highlighter\Parser\Token\Token}/^@@{operator.escape:Kadet\Highlighter\Parser\Token\Token}\s{/operator.escape:Kadet\Highlighter\Parser\Token\Token}*(.*{operator.escape:Kadet\Highlighter\Parser\Token\Token}\S{/operator.escape:Kadet\Highlighter\Parser\Token\Token}){operator.escape:Kadet\Highlighter\Parser\Token\Token}\s{/operator.escape:Kadet\Highlighter\Parser\Token\Token}*$/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}
              template = {call:Kadet\Highlighter\Parser\Token\Token}force_encoding{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}''{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}, encoding)
              templates[{variable.global:Kadet\Highlighter\Parser\Token\Token}$1{/variable.global:Kadet\Highlighter\Parser\Token\Token}.to_sym] = [template, file, lines]
            {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} template
              template << line
            {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Lookup or register a mime type in Rack's mime registry.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}mime_type{/call:Kadet\Highlighter\Parser\Token\Token}(type, value={constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token})
        {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} type {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} type.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}? || type.to_s.{call:Kadet\Highlighter\Parser\Token\Token}include?{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'/'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})
        type = {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}".{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{type}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} type.to_s[{number:Kadet\Highlighter\Parser\Token\Token}0{/number:Kadet\Highlighter\Parser\Token\Token}] == ?.
        {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Mime{/constant:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}mime_type{/call:Kadet\Highlighter\Parser\Token\Token}(type, {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}) {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} value
        Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Mime{/constant:Kadet\Highlighter\Parser\Token\Token}::{constant:Kadet\Highlighter\Parser\Token\Token}MIME_TYPES{/constant:Kadet\Highlighter\Parser\Token\Token}[type] = {call:Kadet\Highlighter\Parser\Token\Token}value{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# provides all mime types matching type, including deprecated types:{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}#   mime_types :html # => ['text/html']{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}#   mime_types :js   # => ['application/javascript', 'text/javascript']{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}mime_types{/call:Kadet\Highlighter\Parser\Token\Token}(type)
        type = {call:Kadet\Highlighter\Parser\Token\Token}mime_type{/call:Kadet\Highlighter\Parser\Token\Token} type
        type =~ {string.regex:Kadet\Highlighter\Parser\Token\Token}/^application{operator.escape:Kadet\Highlighter\Parser\Token\Token}\/{/operator.escape:Kadet\Highlighter\Parser\Token\Token}(xml|javascript)$/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken} ? [type, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"text/#$1"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}] : [type]
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Define a before filter; runs before all requests within the same{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# context as route handlers and may access/modify the request and{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# response.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}before{/call:Kadet\Highlighter\Parser\Token\Token}(path = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}, options = {}, &block)
        {call:Kadet\Highlighter\Parser\Token\Token}add_filter{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:before{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, path, options, &block)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Define an after filter; runs after all requests within the same{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# context as route handlers and may access/modify the request and{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# response.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}after{/call:Kadet\Highlighter\Parser\Token\Token}(path = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}, options = {}, &block)
        {call:Kadet\Highlighter\Parser\Token\Token}add_filter{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:after{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, path, options, &block)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# add a filter{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}add_filter{/call:Kadet\Highlighter\Parser\Token\Token}(type, path = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}, options = {}, &block)
        path, options = {string.regex:Kadet\Highlighter\Parser\Token\Token}//{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}, path {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} path.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:each_pair{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
        filters[type] << {call:Kadet\Highlighter\Parser\Token\Token}compile!{/call:Kadet\Highlighter\Parser\Token\Token}(type, path || {string.regex:Kadet\Highlighter\Parser\Token\Token}//{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}, block, options)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Add a route condition. The route is considered non-matching when the{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# block returns false.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}condition{/call:Kadet\Highlighter\Parser\Token\Token}(name = {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{caller.first[{string.regex:Kadet\Highlighter\Parser\Token\Token}/`.*'/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}]}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken} condition"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}, &block)
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@conditions{/variable.property:Kadet\Highlighter\Parser\Token\Token} << {call:Kadet\Highlighter\Parser\Token\Token}generate_method{/call:Kadet\Highlighter\Parser\Token\Token}(name, &block)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}public{/symbol.function:Kadet\Highlighter\Parser\Token\Token}=(value)
        {call:Kadet\Highlighter\Parser\Token\Token}warn{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}":public is no longer used to avoid overloading Module#public, use :public_dir instead"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
        {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:public_folder{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, value)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}public_dir{/symbol.function:Kadet\Highlighter\Parser\Token\Token}=(value)
        {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.public_folder = {call:Kadet\Highlighter\Parser\Token\Token}value{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}public_dir{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}public_folder{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# Dynamically defines a method on settings.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}define_singleton_method{/call:Kadet\Highlighter\Parser\Token\Token}(name, content = Proc.new)
        {comment:Kadet\Highlighter\Parser\Token\Token}# replace with call to singleton_class once we're 1.9 only{/comment:Kadet\Highlighter\Parser\Token\Token}
        ({keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} << {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}; {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}; {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}).class_eval {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {call:Kadet\Highlighter\Parser\Token\Token}undef_method{/call:Kadet\Highlighter\Parser\Token\Token}(name) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} method_defined? name
          String === content ? {call:Kadet\Highlighter\Parser\Token\Token}class_eval{/call:Kadet\Highlighter\Parser\Token\Token}({string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"def {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{name}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}() {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{content}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}; end"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}) : {call:Kadet\Highlighter\Parser\Token\Token}define_method{/call:Kadet\Highlighter\Parser\Token\Token}(name, &content)
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Condition for matching host name. Parameter might be String or Regexp.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}host_name{/call:Kadet\Highlighter\Parser\Token\Token}(pattern)
        condition { pattern === request.host }
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Condition for matching user agent. Parameter should be Regexp.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# Will set params[:agent].{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}user_agent{/call:Kadet\Highlighter\Parser\Token\Token}(pattern)
        {call:Kadet\Highlighter\Parser\Token\Token}condition{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} request.user_agent.to_s =~ pattern
            {variable.property:Kadet\Highlighter\Parser\Token\Token}@params{/variable.property:Kadet\Highlighter\Parser\Token\Token}[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:agent{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] = {variable.global:Kadet\Highlighter\Parser\Token\Token}${/variable.global:Kadet\Highlighter\Parser\Token\Token}~[{number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}..{number:Kadet\Highlighter\Parser\Token\Token}-1{/number:Kadet\Highlighter\Parser\Token\Token}]
            {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
            {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}alias_method{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:agent{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:user_agent{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Condition for matching mimetypes. Accepts file extensions.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}provides{/call:Kadet\Highlighter\Parser\Token\Token}(*types)
        types.map! { |t| {call:Kadet\Highlighter\Parser\Token\Token}mime_types{/call:Kadet\Highlighter\Parser\Token\Token}(t) }
        types.{call:Kadet\Highlighter\Parser\Token\Token}flatten!{/call:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}condition{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} type = response[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'Content-Type'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]
            types.{call:Kadet\Highlighter\Parser\Token\Token}include?{/call:Kadet\Highlighter\Parser\Token\Token} type {keyword:Kadet\Highlighter\Parser\Token\Token}or{/keyword:Kadet\Highlighter\Parser\Token\Token} types.{call:Kadet\Highlighter\Parser\Token\Token}include?{/call:Kadet\Highlighter\Parser\Token\Token} type[{string.regex:Kadet\Highlighter\Parser\Token\Token}/^[^;]+/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}]
          {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} type = request.{call:Kadet\Highlighter\Parser\Token\Token}preferred_type{/call:Kadet\Highlighter\Parser\Token\Token}(types)
            {call:Kadet\Highlighter\Parser\Token\Token}content_type{/call:Kadet\Highlighter\Parser\Token\Token}(type)
            {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
            {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}public{/call:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# Defining a `GET` handler also automatically defines{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# a `HEAD` handler.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}get{/call:Kadet\Highlighter\Parser\Token\Token}(path, opts={}, &block)
        conditions = {variable.property:Kadet\Highlighter\Parser\Token\Token}@conditions{/variable.property:Kadet\Highlighter\Parser\Token\Token}.dup
        {call:Kadet\Highlighter\Parser\Token\Token}route{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'GET'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}, path, opts, &block)

        {variable.property:Kadet\Highlighter\Parser\Token\Token}@conditions{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {call:Kadet\Highlighter\Parser\Token\Token}conditions{/call:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}route{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HEAD'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}, path, opts, &block)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}put{/call:Kadet\Highlighter\Parser\Token\Token}(path, opts={}, &bk)     route {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'PUT'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken},     path, opts, &bk {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}post{/call:Kadet\Highlighter\Parser\Token\Token}(path, opts={}, &bk)    route {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'POST'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken},    path, opts, &bk {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}(path, opts={}, &bk)  route {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'DELETE'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken},  path, opts, &bk {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}head{/call:Kadet\Highlighter\Parser\Token\Token}(path, opts={}, &bk)    route {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'HEAD'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken},    path, opts, &bk {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}options{/call:Kadet\Highlighter\Parser\Token\Token}(path, opts={}, &bk) route {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'OPTIONS'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}, path, opts, &bk {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}patch{/call:Kadet\Highlighter\Parser\Token\Token}(path, opts={}, &bk)   route {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'PATCH'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken},   path, opts, &bk {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}route{/call:Kadet\Highlighter\Parser\Token\Token}(verb, path, options={}, &block)
        {comment:Kadet\Highlighter\Parser\Token\Token}# Because of self.options.host{/comment:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}host_name{/call:Kadet\Highlighter\Parser\Token\Token}(options.{call:Kadet\Highlighter\Parser\Token\Token}delete{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:host{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} options.{call:Kadet\Highlighter\Parser\Token\Token}key?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:host{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
        {call:Kadet\Highlighter\Parser\Token\Token}enable{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:empty_path_info{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} path == {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}""{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}and{/keyword:Kadet\Highlighter\Parser\Token\Token} empty_path_info.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}?
        signature = {call:Kadet\Highlighter\Parser\Token\Token}compile!{/call:Kadet\Highlighter\Parser\Token\Token}(verb, path, block, options)
        ({variable.property:Kadet\Highlighter\Parser\Token\Token}@routes{/variable.property:Kadet\Highlighter\Parser\Token\Token}[verb] ||= []) << signature
        {call:Kadet\Highlighter\Parser\Token\Token}invoke_hook{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:route_added{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, verb, path, block)
        {call:Kadet\Highlighter\Parser\Token\Token}signature{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}invoke_hook{/call:Kadet\Highlighter\Parser\Token\Token}(name, *args)
        extensions.each { |e| e.{call:Kadet\Highlighter\Parser\Token\Token}send{/call:Kadet\Highlighter\Parser\Token\Token}(name, *args) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} e.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}(name) }
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}generate_method{/call:Kadet\Highlighter\Parser\Token\Token}(method_name, &block)
        {call:Kadet\Highlighter\Parser\Token\Token}define_method{/call:Kadet\Highlighter\Parser\Token\Token}(method_name, &block)
        method = {call:Kadet\Highlighter\Parser\Token\Token}instance_method{/call:Kadet\Highlighter\Parser\Token\Token} method_name
        {call:Kadet\Highlighter\Parser\Token\Token}remove_method{/call:Kadet\Highlighter\Parser\Token\Token} method_name
        {call:Kadet\Highlighter\Parser\Token\Token}method{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}compile!{/call:Kadet\Highlighter\Parser\Token\Token}(verb, path, block, options = {})
        options.each_pair { |option, args| {call:Kadet\Highlighter\Parser\Token\Token}send{/call:Kadet\Highlighter\Parser\Token\Token}(option, *args) }
        method_name             = {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{verb}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken} {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{path}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
        unbound_method          = {call:Kadet\Highlighter\Parser\Token\Token}generate_method{/call:Kadet\Highlighter\Parser\Token\Token}(method_name, &block)
        pattern, keys           = {call:Kadet\Highlighter\Parser\Token\Token}compile{/call:Kadet\Highlighter\Parser\Token\Token} path
        conditions, {variable.property:Kadet\Highlighter\Parser\Token\Token}@conditions{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {variable.property:Kadet\Highlighter\Parser\Token\Token}@conditions{/variable.property:Kadet\Highlighter\Parser\Token\Token}, []

        [ pattern, keys, conditions, block.arity != {number:Kadet\Highlighter\Parser\Token\Token}0{/number:Kadet\Highlighter\Parser\Token\Token} ?
            proc { |a,p| unbound_method.{call:Kadet\Highlighter\Parser\Token\Token}bind{/call:Kadet\Highlighter\Parser\Token\Token}(a).{call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(*p) } :
            proc { |a,p| unbound_method.{call:Kadet\Highlighter\Parser\Token\Token}bind{/call:Kadet\Highlighter\Parser\Token\Token}(a).call } ]
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}compile{/call:Kadet\Highlighter\Parser\Token\Token}(path)
        keys = []
        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} path.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:to_str{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
          pattern = path.to_str.{call:Kadet\Highlighter\Parser\Token\Token}gsub{/call:Kadet\Highlighter\Parser\Token\Token}({string.regex:Kadet\Highlighter\Parser\Token\Token}/[^{operator.escape:Kadet\Highlighter\Parser\Token\Token}\?{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\%{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\\{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\/{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\:{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\*{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\w{/operator.escape:Kadet\Highlighter\Parser\Token\Token}]/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}) { |c| {call:Kadet\Highlighter\Parser\Token\Token}encoded{/call:Kadet\Highlighter\Parser\Token\Token}(c) }
          pattern.{call:Kadet\Highlighter\Parser\Token\Token}gsub!{/call:Kadet\Highlighter\Parser\Token\Token}({string.regex:Kadet\Highlighter\Parser\Token\Token}/((:{operator.escape:Kadet\Highlighter\Parser\Token\Token}\w{/operator.escape:Kadet\Highlighter\Parser\Token\Token}+)|{operator.escape:Kadet\Highlighter\Parser\Token\Token}\*{/operator.escape:Kadet\Highlighter\Parser\Token\Token})/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}) {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |match|
            {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} match == {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"*"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
              keys << {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'splat'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
              {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"(.*?)"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
            {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
              keys << {variable.global:Kadet\Highlighter\Parser\Token\Token}$2{/variable.global:Kadet\Highlighter\Parser\Token\Token}[{number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}..{number:Kadet\Highlighter\Parser\Token\Token}-1{/number:Kadet\Highlighter\Parser\Token\Token}]
              {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"([^/?#]+)"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
            {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
          [{string.regex:Kadet\Highlighter\Parser\Token\Token}/^#{pattern}$/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}, keys]
        {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} path.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:keys{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) && path.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:match{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
          [path, path.keys]
        {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} path.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:names{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) && path.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:match{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
          [path, path.names]
        {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} path.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:match{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
          [path, keys]
        {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {call:Kadet\Highlighter\Parser\Token\Token}raise{/call:Kadet\Highlighter\Parser\Token\Token} TypeError, path
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      URI = ::{constant:Kadet\Highlighter\Parser\Token\Token}URI{/constant:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}const_defined?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:Parser{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) ? ::{constant:Kadet\Highlighter\Parser\Token\Token}URI{/constant:Kadet\Highlighter\Parser\Token\Token}::{constant:Kadet\Highlighter\Parser\Token\Token}Parser{/constant:Kadet\Highlighter\Parser\Token\Token}.new : ::{constant:Kadet\Highlighter\Parser\Token\Token}URI{/constant:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}encoded{/call:Kadet\Highlighter\Parser\Token\Token}(char)
        enc = URI.{call:Kadet\Highlighter\Parser\Token\Token}escape{/call:Kadet\Highlighter\Parser\Token\Token}(char)
        enc = {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"(?:{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{Regexp.{call:Kadet\Highlighter\Parser\Token\Token}escape{/call:Kadet\Highlighter\Parser\Token\Token} enc}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}|{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{URI.{call:Kadet\Highlighter\Parser\Token\Token}escape{/call:Kadet\Highlighter\Parser\Token\Token} char, {string.regex:Kadet\Highlighter\Parser\Token\Token}/./{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken})"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} enc == {call:Kadet\Highlighter\Parser\Token\Token}char{/call:Kadet\Highlighter\Parser\Token\Token}
        enc = {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"(?:{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{enc}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}|{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{{call:Kadet\Highlighter\Parser\Token\Token}encoded{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'+'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken})"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} char == {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}" "{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
        {call:Kadet\Highlighter\Parser\Token\Token}enc{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}public{/call:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# Makes the methods defined in the block and in the Modules given{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# in `extensions` available to the handlers and templates{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}helpers{/call:Kadet\Highlighter\Parser\Token\Token}(*extensions, &block)
        {call:Kadet\Highlighter\Parser\Token\Token}class_eval{/call:Kadet\Highlighter\Parser\Token\Token}(&block)   {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} block_given?
        {call:Kadet\Highlighter\Parser\Token\Token}include{/call:Kadet\Highlighter\Parser\Token\Token}(*extensions) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} extensions.any?
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Register an extension. Alternatively take a block from which an{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# extension will be created and registered on the fly.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}register{/call:Kadet\Highlighter\Parser\Token\Token}(*extensions, &block)
        extensions << Module.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}(&block) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} block_given?
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@extensions{/variable.property:Kadet\Highlighter\Parser\Token\Token} += {call:Kadet\Highlighter\Parser\Token\Token}extensions{/call:Kadet\Highlighter\Parser\Token\Token}
        extensions.{call:Kadet\Highlighter\Parser\Token\Token}each{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |extension|
          {call:Kadet\Highlighter\Parser\Token\Token}extend{/call:Kadet\Highlighter\Parser\Token\Token} extension
          extension.{call:Kadet\Highlighter\Parser\Token\Token}registered{/call:Kadet\Highlighter\Parser\Token\Token}({constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} extension.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:registered{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token})
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}development{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?; environment == {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:development{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}production{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?;  environment == {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:production{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}test{/symbol.function:Kadet\Highlighter\Parser\Token\Token}?;        environment == {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:test{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Set configuration options for Sinatra and/or the app.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# Allows scoping of settings for certain environments.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}configure{/call:Kadet\Highlighter\Parser\Token\Token}(*envs, &block)
        {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} envs.empty? || envs.{call:Kadet\Highlighter\Parser\Token\Token}include?{/call:Kadet\Highlighter\Parser\Token\Token}(environment.to_sym)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Use the specified Rack middleware{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token}(middleware, *args, &block)
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@prototype{/variable.property:Kadet\Highlighter\Parser\Token\Token} = {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@middleware{/variable.property:Kadet\Highlighter\Parser\Token\Token} << [middleware, args, block]
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}quit!{/call:Kadet\Highlighter\Parser\Token\Token}(server, handler_name)
        {comment:Kadet\Highlighter\Parser\Token\Token}# Use Thin's hard #stop! if available, otherwise just #stop.{/comment:Kadet\Highlighter\Parser\Token\Token}
        server.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:stop{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}!) ? server.stop! : server.stop
        {variable.global:Kadet\Highlighter\Parser\Token\Token}$stderr{/variable.global:Kadet\Highlighter\Parser\Token\Token}.puts {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{operator.escape:Kadet\Highlighter\Parser\Token\Token}\n{/operator.escape:Kadet\Highlighter\Parser\Token\Token}== Sinatra has ended his set (crowd applauds)"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} handler_name =~{string.regex:Kadet\Highlighter\Parser\Token\Token}/cgi/i{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Run the Sinatra app as a self-hosted server using{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# Thin, Puma, Mongrel, or WEBrick (in that order). If given a block, will call{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# with the constructed handler once we have taken the stage.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}run!{/call:Kadet\Highlighter\Parser\Token\Token}(options={})
        {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} options
        handler         = {call:Kadet\Highlighter\Parser\Token\Token}detect_rack_handler{/call:Kadet\Highlighter\Parser\Token\Token}
        handler_name    = handler.name.{call:Kadet\Highlighter\Parser\Token\Token}gsub{/call:Kadet\Highlighter\Parser\Token\Token}({string.regex:Kadet\Highlighter\Parser\Token\Token}/.*::/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}, {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}''{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})
        server_settings = settings.{call:Kadet\Highlighter\Parser\Token\Token}respond_to?{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:server_settings{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}) ? settings.server_settings : {}
        handler.{call:Kadet\Highlighter\Parser\Token\Token}run{/call:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}, server_settings.{call:Kadet\Highlighter\Parser\Token\Token}merge{/call:Kadet\Highlighter\Parser\Token\Token}({symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:Port{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => port, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:Host{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} => bind) {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |server|
          {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} handler_name =~ {string.regex:Kadet\Highlighter\Parser\Token\Token}/cgi/i{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}
            {variable.global:Kadet\Highlighter\Parser\Token\Token}$stderr{/variable.global:Kadet\Highlighter\Parser\Token\Token}.puts {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"== Sinatra/{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{Sinatra::{constant:Kadet\Highlighter\Parser\Token\Token}VERSION{/constant:Kadet\Highlighter\Parser\Token\Token}}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken} has taken the stage "{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} +
            {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"on {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{port}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken} for {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{environment}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken} with backup from {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{handler_name}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
          [{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:INT{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:TERM{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}].each { |sig| {call:Kadet\Highlighter\Parser\Token\Token}trap{/call:Kadet\Highlighter\Parser\Token\Token}(sig) { {call:Kadet\Highlighter\Parser\Token\Token}quit!{/call:Kadet\Highlighter\Parser\Token\Token}(server, handler_name) } }
          server.threaded = settings.{call:Kadet\Highlighter\Parser\Token\Token}threaded{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} server.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:threaded{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}=
          {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:running{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token} server {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} block_given?
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}rescue{/keyword:Kadet\Highlighter\Parser\Token\Token} Errno::{constant:Kadet\Highlighter\Parser\Token\Token}EADDRINUSE{/constant:Kadet\Highlighter\Parser\Token\Token}
        {variable.global:Kadet\Highlighter\Parser\Token\Token}$stderr{/variable.global:Kadet\Highlighter\Parser\Token\Token}.puts {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"== Someone is already performing on port {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{port}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}!"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# The prototype instance used to process requests.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}prototype{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
        {variable.property:Kadet\Highlighter\Parser\Token\Token}@prototype{/variable.property:Kadet\Highlighter\Parser\Token\Token} ||= {call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Create a new instance without middleware in front of it.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}alias{/keyword:Kadet\Highlighter\Parser\Token\Token} new! new {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} method_defined? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:new{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}!

      {comment:Kadet\Highlighter\Parser\Token\Token}# Create a new instance of the class fronted by its middleware{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# pipeline. The object is guaranteed to respond to #call but may not be{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# an instance of the class new was called on.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}(*args, &bk)
        instance = {call:Kadet\Highlighter\Parser\Token\Token}new!{/call:Kadet\Highlighter\Parser\Token\Token}(*args, &bk)
        Wrapper.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}({call:Kadet\Highlighter\Parser\Token\Token}build{/call:Kadet\Highlighter\Parser\Token\Token}(instance).to_app, instance)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Creates a Rack::Builder instance with all the middleware set up and{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# the given +app+ as end point.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}build{/call:Kadet\Highlighter\Parser\Token\Token}(app)
        builder = Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Builder{/constant:Kadet\Highlighter\Parser\Token\Token}.new
        {call:Kadet\Highlighter\Parser\Token\Token}setup_default_middleware{/call:Kadet\Highlighter\Parser\Token\Token} builder
        {call:Kadet\Highlighter\Parser\Token\Token}setup_middleware{/call:Kadet\Highlighter\Parser\Token\Token} builder
        builder.{call:Kadet\Highlighter\Parser\Token\Token}run{/call:Kadet\Highlighter\Parser\Token\Token} app
        {call:Kadet\Highlighter\Parser\Token\Token}builder{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(env)
        synchronize { prototype.{call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(env) }
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}setup_default_middleware{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
        builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token} ExtendedRack
        builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token} ShowExceptions       {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} show_exceptions?
        builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}MethodOverride{/constant:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} method_override?
        builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Head{/constant:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}setup_logging{/call:Kadet\Highlighter\Parser\Token\Token}    builder
        {call:Kadet\Highlighter\Parser\Token\Token}setup_sessions{/call:Kadet\Highlighter\Parser\Token\Token}   builder
        {call:Kadet\Highlighter\Parser\Token\Token}setup_protection{/call:Kadet\Highlighter\Parser\Token\Token} builder
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}setup_middleware{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
        middleware.each { |c,a,b| builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token}(c, *a, &b) }
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}setup_logging{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} logging?
          {call:Kadet\Highlighter\Parser\Token\Token}setup_common_logger{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
          {call:Kadet\Highlighter\Parser\Token\Token}setup_custom_logger{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
        {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} logging == {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
          {call:Kadet\Highlighter\Parser\Token\Token}setup_null_logger{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}setup_null_logger{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
        builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}NullLogger{/constant:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}setup_common_logger{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
        builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token} Sinatra::{constant:Kadet\Highlighter\Parser\Token\Token}CommonLogger{/constant:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}setup_custom_logger{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} logging.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:to_int{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
          builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Logger{/constant:Kadet\Highlighter\Parser\Token\Token}, logging
        {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
          builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Logger{/constant:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}setup_protection{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
        {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} protection?
        options = Hash === protection ? protection.dup : {}
        options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:except{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] = {call:Kadet\Highlighter\Parser\Token\Token}Array{/call:Kadet\Highlighter\Parser\Token\Token} options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:except{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}]
        options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:except{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] += [{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:session_hijacking{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:remote_token{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} sessions?
        options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:reaction{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] ||= {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:drop_session{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
        builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Protection{/constant:Kadet\Highlighter\Parser\Token\Token}, options
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}setup_sessions{/call:Kadet\Highlighter\Parser\Token\Token}(builder)
        {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} sessions?
        options = {}
        options[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:secret{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}] = {call:Kadet\Highlighter\Parser\Token\Token}session_secret{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} session_secret?
        options.{call:Kadet\Highlighter\Parser\Token\Token}merge!{/call:Kadet\Highlighter\Parser\Token\Token} sessions.to_hash {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} sessions.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:to_hash{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
        builder.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Session{/constant:Kadet\Highlighter\Parser\Token\Token}::{constant:Kadet\Highlighter\Parser\Token\Token}Cookie{/constant:Kadet\Highlighter\Parser\Token\Token}, options
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}detect_rack_handler{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
        servers = {call:Kadet\Highlighter\Parser\Token\Token}Array{/call:Kadet\Highlighter\Parser\Token\Token}(server)
        servers.{call:Kadet\Highlighter\Parser\Token\Token}each{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |server_name|
          {keyword:Kadet\Highlighter\Parser\Token\Token}begin{/keyword:Kadet\Highlighter\Parser\Token\Token}
            {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} Rack::{constant:Kadet\Highlighter\Parser\Token\Token}Handler{/constant:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}get{/call:Kadet\Highlighter\Parser\Token\Token}(server_name.to_s)
          {keyword:Kadet\Highlighter\Parser\Token\Token}rescue{/keyword:Kadet\Highlighter\Parser\Token\Token} LoadError, NameError
          {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}fail{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"Server handler ({expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{servers.{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}','{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}) not found."{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}inherited{/call:Kadet\Highlighter\Parser\Token\Token}(subclass)
        subclass.{call:Kadet\Highlighter\Parser\Token\Token}reset!{/call:Kadet\Highlighter\Parser\Token\Token}
        subclass.{call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:app_file{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, caller_files.first {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} subclass.app_file?
        {keyword:Kadet\Highlighter\Parser\Token\Token}super{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {variable.property:Kadet\Highlighter\Parser\Token\Token}@@mutex{/variable.property:Kadet\Highlighter\Parser\Token\Token} = Mutex.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}synchronize{/call:Kadet\Highlighter\Parser\Token\Token}(&block)
        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} lock?
          {variable.property:Kadet\Highlighter\Parser\Token\Token}@@mutex{/variable.property:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}synchronize{/call:Kadet\Highlighter\Parser\Token\Token}(&block)
        {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
          {keyword:Kadet\Highlighter\Parser\Token\Token}yield{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}public{/call:Kadet\Highlighter\Parser\Token\Token}
      CALLERS_TO_IGNORE = [ {comment:Kadet\Highlighter\Parser\Token\Token}# :nodoc:{/comment:Kadet\Highlighter\Parser\Token\Token}
        {string.regex:Kadet\Highlighter\Parser\Token\Token}/{operator.escape:Kadet\Highlighter\Parser\Token\Token}\/{/operator.escape:Kadet\Highlighter\Parser\Token\Token}sinatra({operator.escape:Kadet\Highlighter\Parser\Token\Token}\/{/operator.escape:Kadet\Highlighter\Parser\Token\Token}(base|main|showexceptions))?{operator.escape:Kadet\Highlighter\Parser\Token\Token}\.{/operator.escape:Kadet\Highlighter\Parser\Token\Token}rb$/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}, {comment:Kadet\Highlighter\Parser\Token\Token}# all sinatra code{/comment:Kadet\Highlighter\Parser\Token\Token}
        {string.regex:Kadet\Highlighter\Parser\Token\Token}/lib{operator.escape:Kadet\Highlighter\Parser\Token\Token}\/{/operator.escape:Kadet\Highlighter\Parser\Token\Token}tilt.*{operator.escape:Kadet\Highlighter\Parser\Token\Token}\.{/operator.escape:Kadet\Highlighter\Parser\Token\Token}rb$/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken},                              {comment:Kadet\Highlighter\Parser\Token\Token}# all tilt code{/comment:Kadet\Highlighter\Parser\Token\Token}
        {string.regex:Kadet\Highlighter\Parser\Token\Token}/^{operator.escape:Kadet\Highlighter\Parser\Token\Token}\({/operator.escape:Kadet\Highlighter\Parser\Token\Token}.*{operator.escape:Kadet\Highlighter\Parser\Token\Token}\){/operator.escape:Kadet\Highlighter\Parser\Token\Token}$/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken},                                      {comment:Kadet\Highlighter\Parser\Token\Token}# generated code{/comment:Kadet\Highlighter\Parser\Token\Token}
        {string.regex:Kadet\Highlighter\Parser\Token\Token}/rubygems{operator.escape:Kadet\Highlighter\Parser\Token\Token}\/{/operator.escape:Kadet\Highlighter\Parser\Token\Token}custom_require{operator.escape:Kadet\Highlighter\Parser\Token\Token}\.{/operator.escape:Kadet\Highlighter\Parser\Token\Token}rb$/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken},                 {comment:Kadet\Highlighter\Parser\Token\Token}# rubygems require hacks{/comment:Kadet\Highlighter\Parser\Token\Token}
        {string.regex:Kadet\Highlighter\Parser\Token\Token}/active_support/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken},                                {comment:Kadet\Highlighter\Parser\Token\Token}# active_support require hacks{/comment:Kadet\Highlighter\Parser\Token\Token}
        {string.regex:Kadet\Highlighter\Parser\Token\Token}/bundler({operator.escape:Kadet\Highlighter\Parser\Token\Token}\/{/operator.escape:Kadet\Highlighter\Parser\Token\Token}runtime)?{operator.escape:Kadet\Highlighter\Parser\Token\Token}\.{/operator.escape:Kadet\Highlighter\Parser\Token\Token}rb/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken},                       {comment:Kadet\Highlighter\Parser\Token\Token}# bundler require hacks{/comment:Kadet\Highlighter\Parser\Token\Token}
        {string.regex:Kadet\Highlighter\Parser\Token\Token}/<internal:/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken},                                    {comment:Kadet\Highlighter\Parser\Token\Token}# internal in ruby >= 1.9.2{/comment:Kadet\Highlighter\Parser\Token\Token}
        {string.regex:Kadet\Highlighter\Parser\Token\Token}/src{operator.escape:Kadet\Highlighter\Parser\Token\Token}\/{/operator.escape:Kadet\Highlighter\Parser\Token\Token}kernel{operator.escape:Kadet\Highlighter\Parser\Token\Token}\/{/operator.escape:Kadet\Highlighter\Parser\Token\Token}bootstrap{operator.escape:Kadet\Highlighter\Parser\Token\Token}\/{/operator.escape:Kadet\Highlighter\Parser\Token\Token}[A-Z]/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}                  {comment:Kadet\Highlighter\Parser\Token\Token}# maglev kernel files{/comment:Kadet\Highlighter\Parser\Token\Token}
      ]

      {comment:Kadet\Highlighter\Parser\Token\Token}# contrary to what the comment said previously, rubinius never supported this{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}defined?{/call:Kadet\Highlighter\Parser\Token\Token}(RUBY_IGNORE_CALLERS)
        {call:Kadet\Highlighter\Parser\Token\Token}warn{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"RUBY_IGNORE_CALLERS is deprecated and will no longer be supported by Sinatra 2.0"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
        CALLERS_TO_IGNORE.{call:Kadet\Highlighter\Parser\Token\Token}concat{/call:Kadet\Highlighter\Parser\Token\Token}(RUBY_IGNORE_CALLERS)
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Like Kernel#caller but excluding certain magic entries and without{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# line / method information; the resulting array contains filenames only.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}caller_files{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}cleaned_caller{/call:Kadet\Highlighter\Parser\Token\Token}({number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}).flatten
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Like caller_files, but containing Arrays rather than strings with the{/comment:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# first element being the file, and the second being the line.{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}caller_locations{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}cleaned_caller{/call:Kadet\Highlighter\Parser\Token\Token} {number:Kadet\Highlighter\Parser\Token\Token}2{/number:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token}
      {comment:Kadet\Highlighter\Parser\Token\Token}# used for deprecation warnings{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}warn{/call:Kadet\Highlighter\Parser\Token\Token}(message)
        {keyword:Kadet\Highlighter\Parser\Token\Token}super{/keyword:Kadet\Highlighter\Parser\Token\Token} message + {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{operator.escape:Kadet\Highlighter\Parser\Token\Token}\n{/operator.escape:Kadet\Highlighter\Parser\Token\Token}{operator.escape:Kadet\Highlighter\Parser\Token\Token}\t{/operator.escape:Kadet\Highlighter\Parser\Token\Token}from {expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{cleaned_caller.first.{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}':'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {comment:Kadet\Highlighter\Parser\Token\Token}# Like Kernel#caller but excluding certain magic entries{/comment:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}cleaned_caller{/call:Kadet\Highlighter\Parser\Token\Token}(keep = {number:Kadet\Highlighter\Parser\Token\Token}3{/number:Kadet\Highlighter\Parser\Token\Token})
        {call:Kadet\Highlighter\Parser\Token\Token}caller{/call:Kadet\Highlighter\Parser\Token\Token}({number:Kadet\Highlighter\Parser\Token\Token}1{/number:Kadet\Highlighter\Parser\Token\Token}).
          map    { |line| line.{call:Kadet\Highlighter\Parser\Token\Token}split{/call:Kadet\Highlighter\Parser\Token\Token}({string.regex:Kadet\Highlighter\Parser\Token\Token}/:(?={operator.escape:Kadet\Highlighter\Parser\Token\Token}\d{/operator.escape:Kadet\Highlighter\Parser\Token\Token}|in )/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}, {number:Kadet\Highlighter\Parser\Token\Token}3{/number:Kadet\Highlighter\Parser\Token\Token})[{number:Kadet\Highlighter\Parser\Token\Token}0{/number:Kadet\Highlighter\Parser\Token\Token},keep] }.
          reject { |file, *_| CALLERS_TO_IGNORE.any? { |pattern| file =~ pattern } }
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {comment:Kadet\Highlighter\Parser\Token\Token}# Fixes encoding issues by{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# * defaulting to UTF-8{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# * casting params to Encoding.default_external{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# The latter might not be necessary if Rack handles it one day.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {comment:Kadet\Highlighter\Parser\Token\Token}# Keep an eye on Rack's LH #100.{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}force_encoding{/call:Kadet\Highlighter\Parser\Token\Token}(*args) settings.{call:Kadet\Highlighter\Parser\Token\Token}force_encoding{/call:Kadet\Highlighter\Parser\Token\Token}(*args) {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}defined{/keyword:Kadet\Highlighter\Parser\Token\Token}? Encoding
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}force_encoding{/call:Kadet\Highlighter\Parser\Token\Token}(data, encoding = default_encoding)
        {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} data == settings || data.{call:Kadet\Highlighter\Parser\Token\Token}is_a?{/call:Kadet\Highlighter\Parser\Token\Token}(Tempfile)
        {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} data.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:force_encoding{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
          data.{call:Kadet\Highlighter\Parser\Token\Token}force_encoding{/call:Kadet\Highlighter\Parser\Token\Token}(encoding).encode!
        {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} data.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:each_value{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
          data.each_value { |v| {call:Kadet\Highlighter\Parser\Token\Token}force_encoding{/call:Kadet\Highlighter\Parser\Token\Token}(v, encoding) }
        {keyword:Kadet\Highlighter\Parser\Token\Token}elsif{/keyword:Kadet\Highlighter\Parser\Token\Token} data.respond_to? {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:each{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
          data.each { |v| {call:Kadet\Highlighter\Parser\Token\Token}force_encoding{/call:Kadet\Highlighter\Parser\Token\Token}(v, encoding) }
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}data{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}force_encoding{/call:Kadet\Highlighter\Parser\Token\Token}(data, *) data {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}reset!{/call:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:environment{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, (ENV[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'RACK_ENV'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}] || {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:development{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}).to_sym
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:raise_errors{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { test? }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:dump_errors{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { !test? }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:show_exceptions{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { development? }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:sessions{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:logging{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:protection{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:method_override{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:use_code{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:default_encoding{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"utf-8"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:add_charset{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, %w[javascript xml xhtml+xml json].map { |t| {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"application/{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{t}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} }
    settings.add_charset << /^text\//

    {comment:Kadet\Highlighter\Parser\Token\Token}# explicitly generating a session secret eagerly to play nice with preforking{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}begin{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}require{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'securerandom'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:session_secret{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, SecureRandom.{call:Kadet\Highlighter\Parser\Token\Token}hex{/call:Kadet\Highlighter\Parser\Token\Token}({number:Kadet\Highlighter\Parser\Token\Token}64{/number:Kadet\Highlighter\Parser\Token\Token})
    {keyword:Kadet\Highlighter\Parser\Token\Token}rescue{/keyword:Kadet\Highlighter\Parser\Token\Token} LoadError, NotImplementedError
      {comment:Kadet\Highlighter\Parser\Token\Token}# SecureRandom raises a NotImplementedError if no random device is available{/comment:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:session_secret{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"%064x"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken} % Kernel.{call:Kadet\Highlighter\Parser\Token\Token}rand{/call:Kadet\Highlighter\Parser\Token\Token}({number:Kadet\Highlighter\Parser\Token\Token}2{/number:Kadet\Highlighter\Parser\Token\Token}**{number:Kadet\Highlighter\Parser\Token\Token}256{/number:Kadet\Highlighter\Parser\Token\Token}{number:Kadet\Highlighter\Parser\Token\Token}-1{/number:Kadet\Highlighter\Parser\Token\Token})
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} << {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}alias_method{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:methodoverride{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}?, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:method_override{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}?
      {call:Kadet\Highlighter\Parser\Token\Token}alias_method{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:methodoverride{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}=, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:method_override{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}=
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:run{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}                       {comment:Kadet\Highlighter\Parser\Token\Token}# start server via at-exit hook?{/comment:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:running{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}                   {comment:Kadet\Highlighter\Parser\Token\Token}# is the built-in server running now?{/comment:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:server{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, %w[http webrick]
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:bind{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'0.0.0.0'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:port{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {number:Kadet\Highlighter\Parser\Token\Token}4567{/number:Kadet\Highlighter\Parser\Token\Token}

    ruby_engine = {call:Kadet\Highlighter\Parser\Token\Token}defined?{/call:Kadet\Highlighter\Parser\Token\Token}(RUBY_ENGINE) && {call:Kadet\Highlighter\Parser\Token\Token}RUBY_ENGINE{/call:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} ruby_engine == {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'macruby'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      server.{call:Kadet\Highlighter\Parser\Token\Token}unshift{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'controll_tower'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
    {keyword:Kadet\Highlighter\Parser\Token\Token}else{/keyword:Kadet\Highlighter\Parser\Token\Token}
      server.{call:Kadet\Highlighter\Parser\Token\Token}unshift{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'mongrel'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}  {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} ruby_engine.{constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}?
      server.{call:Kadet\Highlighter\Parser\Token\Token}unshift{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'puma'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}     {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} ruby_engine != {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'rbx'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      server.{call:Kadet\Highlighter\Parser\Token\Token}unshift{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'thin'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}     {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} ruby_engine != {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'jruby'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      server.{call:Kadet\Highlighter\Parser\Token\Token}unshift{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'puma'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}     {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} ruby_engine == {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'rbx'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      server.{call:Kadet\Highlighter\Parser\Token\Token}unshift{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'trinidad'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} ruby_engine =={string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'jruby'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:absolute_redirects{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:prefixed_redirects{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:empty_path_info{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:app_file{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:root{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { app_file && File.{call:Kadet\Highlighter\Parser\Token\Token}expand_path{/call:Kadet\Highlighter\Parser\Token\Token}(File.{call:Kadet\Highlighter\Parser\Token\Token}dirname{/call:Kadet\Highlighter\Parser\Token\Token}(app_file)) }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:views{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { root && File.{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}(root, {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'views'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}) }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:reload_templates{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { development? }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:lock{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:threaded{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:public_folder{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { root && File.{call:Kadet\Highlighter\Parser\Token\Token}join{/call:Kadet\Highlighter\Parser\Token\Token}(root, {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'public'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}) }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:static{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { public_folder && File.{call:Kadet\Highlighter\Parser\Token\Token}exist?{/call:Kadet\Highlighter\Parser\Token\Token}(public_folder) }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:static_cache_control{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}false{/constant.special:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}error{/call:Kadet\Highlighter\Parser\Token\Token} ::{constant:Kadet\Highlighter\Parser\Token\Token}Exception{/constant:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
      response.status = {number:Kadet\Highlighter\Parser\Token\Token}500{/number:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}content_type{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'text/html'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
      {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'<h1>Internal Server Error</h1>'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}configure{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:development{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}get{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'/__sinatra__/:image.png'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
        filename = File.{call:Kadet\Highlighter\Parser\Token\Token}dirname{/call:Kadet\Highlighter\Parser\Token\Token}({constant.special:Kadet\Highlighter\Parser\Token\Token}__FILE__{/constant.special:Kadet\Highlighter\Parser\Token\Token}) + {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"/images/{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{params[{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:image{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}]}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}.png"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
        {call:Kadet\Highlighter\Parser\Token\Token}content_type{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:png{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}send_file{/call:Kadet\Highlighter\Parser\Token\Token} filename
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

      {call:Kadet\Highlighter\Parser\Token\Token}error{/call:Kadet\Highlighter\Parser\Token\Token} NotFound {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}content_type{/call:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'text/html'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}

        (<<-HTML).{call:Kadet\Highlighter\Parser\Token\Token}gsub{/call:Kadet\Highlighter\Parser\Token\Token}({string.regex:Kadet\Highlighter\Parser\Token\Token}/^ {8}/{/string.regex:Kadet\Highlighter\Parser\Token\ContextualToken}, {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}''{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})
        <!DOCTYPE html>
        <html>
        <head>
          <style type={string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"text/css"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}>
          body { text-align{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:center{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token};font-family{symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:helvetica{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token},arial;font-size:{number:Kadet\Highlighter\Parser\Token\Token}22{/number:Kadet\Highlighter\Parser\Token\Token}px;
            color:{comment:Kadet\Highlighter\Parser\Token\Token}#888;margin:20px}{/comment:Kadet\Highlighter\Parser\Token\Token}
          {comment:Kadet\Highlighter\Parser\Token\Token}#c {margin:0 auto;width:500px;text-align:left}{/comment:Kadet\Highlighter\Parser\Token\Token}
          </style>
        </head>
        <body>
          <h2>Sinatra doesn&rsquo;{call:Kadet\Highlighter\Parser\Token\Token}t{/call:Kadet\Highlighter\Parser\Token\Token} know this ditty.</h2>
          <img src={string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'#{uri "/__sinatra__/404.png"}'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}>
          <div id={string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"c"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}>
            {call:Kadet\Highlighter\Parser\Token\Token}Try{/call:Kadet\Highlighter\Parser\Token\Token} this:
            <pre>{comment:Kadet\Highlighter\Parser\Token\Token}#{request.request_method.downcase} '#{request.path_info}' do\n  "Hello World"\nend</pre>{/comment:Kadet\Highlighter\Parser\Token\Token}
          </div>
        </body>
        </html>
        {call:Kadet\Highlighter\Parser\Token\Token}HTML{/call:Kadet\Highlighter\Parser\Token\Token}
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Execution context for classic style (top-level) applications. All{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# DSL methods executed on main are delegated to this class.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}#{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# The Application class should not be subclassed, unless you want to{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# inherit all settings, routes, handlers, and error pages from the{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# top-level. Subclassing Sinatra::Base is highly recommended for{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# modular applications.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Application{/symbol.class:Kadet\Highlighter\Parser\Token\Token} < Base
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:logging{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { ! test? }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:method_override{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}true{/constant.special:Kadet\Highlighter\Parser\Token\Token}
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:run{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { ! test? }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:session_secret{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, Proc.new { {call:Kadet\Highlighter\Parser\Token\Token}super{/call:Kadet\Highlighter\Parser\Token\Token}() {keyword:Kadet\Highlighter\Parser\Token\Token}unless{/keyword:Kadet\Highlighter\Parser\Token\Token} development? }
    {call:Kadet\Highlighter\Parser\Token\Token}set{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:app_file{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {constant.special:Kadet\Highlighter\Parser\Token\Token}nil{/constant.special:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}register{/call:Kadet\Highlighter\Parser\Token\Token}(*extensions, &block) {comment:Kadet\Highlighter\Parser\Token\Token}#:nodoc:{/comment:Kadet\Highlighter\Parser\Token\Token}
      added_methods = extensions.map {|m| m.public_instance_methods }.flatten
      Delegator.{call:Kadet\Highlighter\Parser\Token\Token}delegate{/call:Kadet\Highlighter\Parser\Token\Token}(*added_methods)
      {call:Kadet\Highlighter\Parser\Token\Token}super{/call:Kadet\Highlighter\Parser\Token\Token}(*extensions, &block)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Sinatra delegation mixin. Mixing this module into an object causes all{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# methods to be delegated to the Sinatra::Application class. Used primarily{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# at the top-level.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}module{/keyword:Kadet\Highlighter\Parser\Token\Token} Delegator {comment:Kadet\Highlighter\Parser\Token\Token}#:nodoc:{/comment:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}delegate{/call:Kadet\Highlighter\Parser\Token\Token}(*methods)
      methods.{call:Kadet\Highlighter\Parser\Token\Token}each{/call:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |method_name|
        {call:Kadet\Highlighter\Parser\Token\Token}define_method{/call:Kadet\Highlighter\Parser\Token\Token}(method_name) {keyword:Kadet\Highlighter\Parser\Token\Token}do{/keyword:Kadet\Highlighter\Parser\Token\Token} |*args, &block|
          {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}super{/call:Kadet\Highlighter\Parser\Token\Token}(*args, &block) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} respond_to? method_name
          Delegator.target.{call:Kadet\Highlighter\Parser\Token\Token}send{/call:Kadet\Highlighter\Parser\Token\Token}(method_name, *args, &block)
        {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
        {call:Kadet\Highlighter\Parser\Token\Token}private{/call:Kadet\Highlighter\Parser\Token\Token} method_name
      {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {call:Kadet\Highlighter\Parser\Token\Token}delegate{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:get{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:patch{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:put{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:post{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:delete{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:head{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:options{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:template{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:layout{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token},
             {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:before{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:after{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:error{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:not_found{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:configure{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:set{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:mime_type{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token},
             {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:enable{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:disable{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:use{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:development{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}?, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:test{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}?, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:production{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}?,
             {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:helpers{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}, {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:settings{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} << {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}
      {call:Kadet\Highlighter\Parser\Token\Token}attr_accessor{/call:Kadet\Highlighter\Parser\Token\Token} {symbol.symbol:Kadet\Highlighter\Parser\Token\Token}:target{/symbol.symbol:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.target = {call:Kadet\Highlighter\Parser\Token\Token}Application{/call:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Wrapper{/symbol.class:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}initialize{/call:Kadet\Highlighter\Parser\Token\Token}(stack, instance)
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@stack{/variable.property:Kadet\Highlighter\Parser\Token\Token}, {variable.property:Kadet\Highlighter\Parser\Token\Token}@instance{/variable.property:Kadet\Highlighter\Parser\Token\Token} = stack, instance
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}settings{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@instance{/variable.property:Kadet\Highlighter\Parser\Token\Token}.settings
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}helpers{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@instance{/variable.property:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(env)
      {variable.property:Kadet\Highlighter\Parser\Token\Token}@stack{/variable.property:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}call{/call:Kadet\Highlighter\Parser\Token\Token}(env)
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

    {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}inspect{/symbol.function:Kadet\Highlighter\Parser\Token\Token}
      {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"#<{expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{{variable.property:Kadet\Highlighter\Parser\Token\Token}@instance{/variable.property:Kadet\Highlighter\Parser\Token\Token}.{keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token}}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken} app_file={expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}#{settings.app_file.inspect}{/expression.in-string:Kadet\Highlighter\Parser\Token\LanguageToken}>"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
    {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Create a new Sinatra application. The block is evaluated in the new app's{/comment:Kadet\Highlighter\Parser\Token\Token}
  {comment:Kadet\Highlighter\Parser\Token\Token}# class scope.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}(base=Base, options={}, &block)
    base = Class.{call:Kadet\Highlighter\Parser\Token\Token}new{/call:Kadet\Highlighter\Parser\Token\Token}(base)
    base.{call:Kadet\Highlighter\Parser\Token\Token}class_eval{/call:Kadet\Highlighter\Parser\Token\Token}(&block) {keyword:Kadet\Highlighter\Parser\Token\Token}if{/keyword:Kadet\Highlighter\Parser\Token\Token} block_given?
    {call:Kadet\Highlighter\Parser\Token\Token}base{/call:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Extend the top-level DSL with the modules provided.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}register{/call:Kadet\Highlighter\Parser\Token\Token}(*extensions, &block)
    Delegator.target.{call:Kadet\Highlighter\Parser\Token\Token}register{/call:Kadet\Highlighter\Parser\Token\Token}(*extensions, &block)
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Include the helper modules provided in Sinatra's request context.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}helpers{/call:Kadet\Highlighter\Parser\Token\Token}(*extensions, &block)
    Delegator.target.{call:Kadet\Highlighter\Parser\Token\Token}helpers{/call:Kadet\Highlighter\Parser\Token\Token}(*extensions, &block)
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}

  {comment:Kadet\Highlighter\Parser\Token\Token}# Use the middleware for classic applications.{/comment:Kadet\Highlighter\Parser\Token\Token}
  {keyword:Kadet\Highlighter\Parser\Token\Token}def{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.special:Kadet\Highlighter\Parser\Token\Token}self{/constant.special:Kadet\Highlighter\Parser\Token\Token}.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token}(*args, &block)
    Delegator.target.{call:Kadet\Highlighter\Parser\Token\Token}use{/call:Kadet\Highlighter\Parser\Token\Token}(*args, &block)
  {keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
{keyword:Kadet\Highlighter\Parser\Token\Token}end{/keyword:Kadet\Highlighter\Parser\Token\Token}
{/language.ruby:Kadet\Highlighter\Parser\Token\LanguageToken}