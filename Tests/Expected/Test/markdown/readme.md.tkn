{language.markdown:Kadet\Highlighter\Parser\Token\LanguageToken}{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[Logo]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}http://kadet.net/keylighter/logo.png{/symbol.url:Kadet\Highlighter\Parser\Token\Token})

{symbol.link:Kadet\Highlighter\Parser\Token\Token}[{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[Packagist]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://img.shields.io/packagist/v/kadet/keylighter.svg?style=flat-square{/symbol.url:Kadet\Highlighter\Parser\Token\Token})]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://packagist.org/packages/kadet/keylighter{/symbol.url:Kadet\Highlighter\Parser\Token\Token})
{symbol.link:Kadet\Highlighter\Parser\Token\Token}[{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[Scrutinizer Code Quality]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://img.shields.io/scrutinizer/g/kadet1090/keylighter.svg?style=flat-square{/symbol.url:Kadet\Highlighter\Parser\Token\Token})]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://scrutinizer-ci.com/g/kadet1090/KeyLighter/?branch=master{/symbol.url:Kadet\Highlighter\Parser\Token\Token})
{symbol.link:Kadet\Highlighter\Parser\Token\Token}[{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[Travis build]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://img.shields.io/travis/kadet1090/KeyLighter.svg?style=flat-square{/symbol.url:Kadet\Highlighter\Parser\Token\Token})]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://travis-ci.org/kadet1090/KeyLighter{/symbol.url:Kadet\Highlighter\Parser\Token\Token})
{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[Code Coverage]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://img.shields.io/scrutinizer/coverage/g/kadet1090/keylighter.svg?style=flat-square{/symbol.url:Kadet\Highlighter\Parser\Token\Token})
{symbol.link:Kadet\Highlighter\Parser\Token\Token}[{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[Try it]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://img.shields.io/badge/www-try%20it-FF9700.svg?style=flat-square{/symbol.url:Kadet\Highlighter\Parser\Token\Token})]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}http://keylighter.kadet.net/try{/symbol.url:Kadet\Highlighter\Parser\Token\Token})

{symbol.link:Kadet\Highlighter\Parser\Token\Token}[{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[stability: stable]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://img.shields.io/badge/Public%20API-stable-green.svg?style=flat-square{/symbol.url:Kadet\Highlighter\Parser\Token\Token})]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}(Docs/usage.md)
{symbol.link:Kadet\Highlighter\Parser\Token\Token}[{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[stability: unstable]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://img.shields.io/badge/Internal%20API-unstable-yellow.svg?style=flat-square{/symbol.url:Kadet\Highlighter\Parser\Token\Token})]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}(Docs/extending.md)

Yet another Syntax Highlighter in PHP meant to be as extensible 
and easy to use as it only can, but with performance in mind.

You can try it live with most recent version on {symbol.url:Kadet\Highlighter\Parser\Token\Token}http://keylighter.kadet.net/{/symbol.url:Kadet\Highlighter\Parser\Token\Token}.

{format.header:Kadet\Highlighter\Parser\Token\Token}## Name{/format.header:Kadet\Highlighter\Parser\Token\Token}
Name "KeyLighter" is inspired by Key Light concept in photography and cinematography.

{string.quote:Kadet\Highlighter\Parser\Token\Token}> The key light is the first and usually most important light that a photographer, cinematographer, lighting cameraman, or other scene composer will use in a lighting setup. The purpose of the key light is to highlight the form and dimension of the subject.
{/string.quote:Kadet\Highlighter\Parser\Token\Token}
KeyLighter is supposed to do the same thing - for code.

{format.header:Kadet\Highlighter\Parser\Token\Token}# Installation{/format.header:Kadet\Highlighter\Parser\Token\Token}
{format.block.code:Kadet\Highlighter\Parser\Token\Token}```bash
{language.shell:Kadet\Highlighter\Parser\Token\LanguageToken}{delimiter:Kadet\Highlighter\Parser\Token\Token}${/delimiter:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}composer{/call:Kadet\Highlighter\Parser\Token\Token} require kadet/keylighter{/language.shell:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}

To use {format.bold:Kadet\Highlighter\Parser\Token\Token}**KeyLighter**{/format.bold:Kadet\Highlighter\Parser\Token\Token} you just need PHP 5.5 or later, no special extensions required.

{format.header:Kadet\Highlighter\Parser\Token\Token}## Global installation{/format.header:Kadet\Highlighter\Parser\Token\Token}
It's possible to install {format.bold:Kadet\Highlighter\Parser\Token\Token}**KeyLighter**{/format.bold:Kadet\Highlighter\Parser\Token\Token} as a global composer library
{format.block.code:Kadet\Highlighter\Parser\Token\Token}```bash
{language.shell:Kadet\Highlighter\Parser\Token\LanguageToken}{delimiter:Kadet\Highlighter\Parser\Token\Token}${/delimiter:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}composer{/call:Kadet\Highlighter\Parser\Token\Token} global require kadet/keylighter{/language.shell:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}
Then you can use builtin simple cli highlighting app:
{format.block.code:Kadet\Highlighter\Parser\Token\Token}```bash
{language.shell:Kadet\Highlighter\Parser\Token\LanguageToken}{delimiter:Kadet\Highlighter\Parser\Token\Token}${/delimiter:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}keylighter{/call:Kadet\Highlighter\Parser\Token\Token} [command = highlight] [-l|{symbol.parameter:Kadet\Highlighter\Parser\Token\Token}--language{/symbol.parameter:Kadet\Highlighter\Parser\Token\Token} [LANGUAGE]] [-f|{symbol.parameter:Kadet\Highlighter\Parser\Token\Token}--format{/symbol.parameter:Kadet\Highlighter\Parser\Token\Token} [FORMAT]] [-d|{symbol.parameter:Kadet\Highlighter\Parser\Token\Token}--debug{/symbol.parameter:Kadet\Highlighter\Parser\Token\Token} [DEBUG]] [--]  <path>...{/language.shell:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}
If you want pipe into {format.bold:Kadet\Highlighter\Parser\Token\Token}**KeyLighter**{/format.bold:Kadet\Highlighter\Parser\Token\Token} just specify {format.monospace:Kadet\Highlighter\Parser\Token\Token}`php://stdin`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} as path. You can use {format.monospace:Kadet\Highlighter\Parser\Token\Token}`list`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} command to 
see all available commands, and {format.monospace:Kadet\Highlighter\Parser\Token\Token}`--help`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} argument for detailed help. You don't have to specify {format.monospace:Kadet\Highlighter\Parser\Token\Token}`highlight`{/format.monospace:Kadet\Highlighter\Parser\Token\Token}
command explicitly. 

{format.header:Kadet\Highlighter\Parser\Token\Token}### PowerShell{/format.header:Kadet\Highlighter\Parser\Token\Token}
You're using PowerShell on Windows? Cool! {format.bold:Kadet\Highlighter\Parser\Token\Token}**KeyLighter**{/format.bold:Kadet\Highlighter\Parser\Token\Token} comes with integrated PowerShell module that makes CLI usage even better. Just import module (For example in profile), and you're ready to go.

{format.block.code:Kadet\Highlighter\Parser\Token\Token}```powershell
{language.PowerShell:Kadet\Highlighter\Parser\Token\LanguageToken}{delimiter.prompt:Kadet\Highlighter\Parser\Token\Token}PS>{/delimiter.prompt:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}Import-Module{/call:Kadet\Highlighter\Parser\Token\Token} {string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"{variable:Kadet\Highlighter\Parser\Token\Token}${{variable.scope:Kadet\Highlighter\Parser\Token\Token}env{/variable.scope:Kadet\Highlighter\Parser\Token\Token}:APPDATA}{/variable:Kadet\Highlighter\Parser\Token\Token}\Composer\vendor\kadet\keylighter\bin\KeyLighter.psd1"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}{/language.PowerShell:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}

To use autocompletion features you will need PowerShell v5 (Comes with windows 10) or install {symbol.link:Kadet\Highlighter\Parser\Token\Token}[TabExpansion++]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://github.com/lzybkr/TabExpansionPlusPlus{/symbol.url:Kadet\Highlighter\Parser\Token\Token}) Module.

{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[Powershell Support]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}http://i.imgur.com/jH2VRA8.gif{/symbol.url:Kadet\Highlighter\Parser\Token\Token})

{format.header:Kadet\Highlighter\Parser\Token\Token}## Why KeyLighter?{/format.header:Kadet\Highlighter\Parser\Token\Token}

{format.header:Kadet\Highlighter\Parser\Token\Token}### Simple to use{/format.header:Kadet\Highlighter\Parser\Token\Token}
{format.block.code:Kadet\Highlighter\Parser\Token\Token}```php
{language.php:Kadet\Highlighter\Parser\Token\LanguageToken}{keyword:Kadet\Highlighter\Parser\Token\Token}use{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Kadet\Highlighter\Language{/symbol.class:Kadet\Highlighter\Parser\Token\Token}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token};{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}

{keyword:Kadet\Highlighter\Parser\Token\Token}echo{/keyword:Kadet\Highlighter\Parser\Token\Token} \Kadet\Highlighter\{call:Kadet\Highlighter\Parser\Token\Token}highlight{/call:Kadet\Highlighter\Parser\Token\Token}({variable:Kadet\Highlighter\Parser\Token\Token}$source{/variable:Kadet\Highlighter\Parser\Token\Token}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Language\Php{/symbol.class:Kadet\Highlighter\Parser\Token\Token}(){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {variable:Kadet\Highlighter\Parser\Token\Token}$formatter{/variable:Kadet\Highlighter\Parser\Token\Token}){operator.punctuation:Kadet\Highlighter\Parser\Token\Token};{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
{comment:Kadet\Highlighter\Parser\Token\Token}// or{/comment:Kadet\Highlighter\Parser\Token\Token}
{keyword:Kadet\Highlighter\Parser\Token\Token}echo{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}\Kadet\Highlighter\KeyLighter{/symbol.class:Kadet\Highlighter\Parser\Token\Token}::{call:Kadet\Highlighter\Parser\Token\Token}get{/call:Kadet\Highlighter\Parser\Token\Token}()->{call:Kadet\Highlighter\Parser\Token\Token}{variable.property:Kadet\Highlighter\Parser\Token\Token}highlight{/variable.property:Kadet\Highlighter\Parser\Token\Token}{/call:Kadet\Highlighter\Parser\Token\Token}({variable:Kadet\Highlighter\Parser\Token\Token}$source{/variable:Kadet\Highlighter\Parser\Token\Token}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Language\Php{/symbol.class:Kadet\Highlighter\Parser\Token\Token}(){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {variable:Kadet\Highlighter\Parser\Token\Token}$formatter{/variable:Kadet\Highlighter\Parser\Token\Token}){operator.punctuation:Kadet\Highlighter\Parser\Token\Token};{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
{comment:Kadet\Highlighter\Parser\Token\Token}// or{/comment:Kadet\Highlighter\Parser\Token\Token}
{variable:Kadet\Highlighter\Parser\Token\Token}$keylighter{/variable:Kadet\Highlighter\Parser\Token\Token} = {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}\Kadet\Highlighter\KeyLighter{/symbol.class:Kadet\Highlighter\Parser\Token\Token}([options]){operator.punctuation:Kadet\Highlighter\Parser\Token\Token};{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
{keyword:Kadet\Highlighter\Parser\Token\Token}echo{/keyword:Kadet\Highlighter\Parser\Token\Token} {variable:Kadet\Highlighter\Parser\Token\Token}$keylighter{/variable:Kadet\Highlighter\Parser\Token\Token}->{call:Kadet\Highlighter\Parser\Token\Token}{variable.property:Kadet\Highlighter\Parser\Token\Token}highlight{/variable.property:Kadet\Highlighter\Parser\Token\Token}{/call:Kadet\Highlighter\Parser\Token\Token}({variable:Kadet\Highlighter\Parser\Token\Token}$source{/variable:Kadet\Highlighter\Parser\Token\Token}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Language\Php{/symbol.class:Kadet\Highlighter\Parser\Token\Token}(){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {variable:Kadet\Highlighter\Parser\Token\Token}$formatter{/variable:Kadet\Highlighter\Parser\Token\Token}){operator.punctuation:Kadet\Highlighter\Parser\Token\Token};{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}{/language.php:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}

You can find all available languages {symbol.link:Kadet\Highlighter\Parser\Token\Token}[here]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://github.com/kadet1090/KeyLighter/tree/master/Language{/symbol.url:Kadet\Highlighter\Parser\Token\Token}) and formatters {symbol.link:Kadet\Highlighter\Parser\Token\Token}[here]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://github.com/kadet1090/KeyLighter/tree/master/Formatter{/symbol.url:Kadet\Highlighter\Parser\Token\Token}).

{format.header:Kadet\Highlighter\Parser\Token\Token}### It works on CLI! And more!{/format.header:Kadet\Highlighter\Parser\Token\Token}
{format.bold:Kadet\Highlighter\Parser\Token\Token}**KeyLighter**{/format.bold:Kadet\Highlighter\Parser\Token\Token} was originally designed as CLI highlighter for my own usage,
but then I decided that it should be able to generate any possible output,
currently supported:

{format.header:Kadet\Highlighter\Parser\Token\Token}#### Cli {format.monospace:Kadet\Highlighter\Parser\Token\Token}`\Kadet\Highlighter\Formatter\CliFormatter`{/format.monospace:Kadet\Highlighter\Parser\Token\Token}{/format.header:Kadet\Highlighter\Parser\Token\Token}
{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[CLI]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}http://i.imgur.com/b2bMVrw.png{/symbol.url:Kadet\Highlighter\Parser\Token\Token})

It can even be styled, default styles are stored in {format.monospace:Kadet\Highlighter\Parser\Token\Token}`Styles\Cli\Default.php`{/format.monospace:Kadet\Highlighter\Parser\Token\Token}, but you can just pass additional argument into constructor:

{format.block.code:Kadet\Highlighter\Parser\Token\Token}```php
{language.php:Kadet\Highlighter\Parser\Token\LanguageToken}{keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}\Kadet\Highlighter\Formatter\CliFormatter{/symbol.class:Kadet\Highlighter\Parser\Token\Token}([
    {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'string'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}      => [{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'color'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'green'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
    {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'keyword'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}     => [{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'color'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'yellow'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
    ...
]){/language.php:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}

{format.header:Kadet\Highlighter\Parser\Token\Token}#### HTML {format.monospace:Kadet\Highlighter\Parser\Token\Token}`\Kadet\Highlighter\Formatter\HtmlFormatter`{/format.monospace:Kadet\Highlighter\Parser\Token\Token}{/format.header:Kadet\Highlighter\Parser\Token\Token}
{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[HTML]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}http://i.imgur.com/BRThsX2.png{/symbol.url:Kadet\Highlighter\Parser\Token\Token})

Every token is placed inside it's own {format.monospace:Kadet\Highlighter\Parser\Token\Token}`span`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} so it can be easily styled with css.

{format.block.code:Kadet\Highlighter\Parser\Token\Token}```html
{language.html:Kadet\Highlighter\Parser\Token\LanguageToken}{tag.open:Kadet\Highlighter\Parser\Token\Token}<{symbol.tag:Kadet\Highlighter\Parser\Token\Token}span{/symbol.tag:Kadet\Highlighter\Parser\Token\Token} {symbol.attribute:Kadet\Highlighter\Parser\Token\Token}class{/symbol.attribute:Kadet\Highlighter\Parser\Token\Token}={string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"variable"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}>{/tag.open:Kadet\Highlighter\Parser\Token\Token}$maxOption{tag.close:Kadet\Highlighter\Parser\Token\Token}</{symbol.tag:Kadet\Highlighter\Parser\Token\Token}span{/symbol.tag:Kadet\Highlighter\Parser\Token\Token}>{/tag.close:Kadet\Highlighter\Parser\Token\Token}{/language.html:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}

{format.block.code:Kadet\Highlighter\Parser\Token\Token}```css
{language.css:Kadet\Highlighter\Parser\Token\LanguageToken}{symbol.selector.tag:Kadet\Highlighter\Parser\Token\Token}pre{/symbol.selector.tag:Kadet\Highlighter\Parser\Token\Token} {operator:Kadet\Highlighter\Parser\Token\Token}>{/operator:Kadet\Highlighter\Parser\Token\Token} {symbol.selector.tag:Kadet\Highlighter\Parser\Token\Token}span{/symbol.selector.tag:Kadet\Highlighter\Parser\Token\Token}{symbol.selector.class:Kadet\Highlighter\Parser\Token\Token}.variable{/symbol.selector.class:Kadet\Highlighter\Parser\Token\Token} { {symbol.property:Kadet\Highlighter\Parser\Token\Token}color:{/symbol.property:Kadet\Highlighter\Parser\Token\Token} {constant.color:Kadet\Highlighter\Parser\Token\Token}#F7750D{/constant.color:Kadet\Highlighter\Parser\Token\Token}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token};{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} }{/language.css:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}
{format.header:Kadet\Highlighter\Parser\Token\Token}#### Your own?{/format.header:Kadet\Highlighter\Parser\Token\Token}
It's easy to write your own formatters. Documentation coming soon.

{format.header:Kadet\Highlighter\Parser\Token\Token}### Context sensitive{/format.header:Kadet\Highlighter\Parser\Token\Token}
Some of tokens are valid in some contexts, some are not. This library
is context sensitive and you can define when they are valid.

In this case, context mean just "inside of other token",
for example lets assume that {format.monospace:Kadet\Highlighter\Parser\Token\Token}`string`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} token is defined
as everything from " to the next " and {format.monospace:Kadet\Highlighter\Parser\Token\Token}`keyword`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} is
defined as 'sit' substring.

{format.block.code:Kadet\Highlighter\Parser\Token\Token}```js
{language.javascript:Kadet\Highlighter\Parser\Token\LanguageToken}↓ string:start     ↓ keyword:start
{string.double:Kadet\Highlighter\Parser\Token\ContextualToken}"Lorem ipsum dolor sit amtet"{/string.double:Kadet\Highlighter\Parser\Token\ContextualToken}
         keyword:end ↑      ↑ string:end

Token tree:

Token.{variable.property:Kadet\Highlighter\Parser\Token\Token}name{/variable.property:Kadet\Highlighter\Parser\Token\Token}           Token.{variable.property:Kadet\Highlighter\Parser\Token\Token}pos{/variable.property:Kadet\Highlighter\Parser\Token\Token}
{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}{operator:Kadet\Highlighter\Parser\Token\Token}--{/operator:Kadet\Highlighter\Parser\Token\Token}
string:start         {number:Kadet\Highlighter\Parser\Token\Token}0{/number:Kadet\Highlighter\Parser\Token\Token}
    keyword:start    {number:Kadet\Highlighter\Parser\Token\Token}21{/number:Kadet\Highlighter\Parser\Token\Token}
    keyword:end      {number:Kadet\Highlighter\Parser\Token\Token}23{/number:Kadet\Highlighter\Parser\Token\Token}
string:end           {number:Kadet\Highlighter\Parser\Token\Token}30{/number:Kadet\Highlighter\Parser\Token\Token}{/language.javascript:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}

So as you can see {format.monospace:Kadet\Highlighter\Parser\Token\Token}`keyword`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} is inside of {format.monospace:Kadet\Highlighter\Parser\Token\Token}`string`{/format.monospace:Kadet\Highlighter\Parser\Token\Token},
and therefore is not valid and should be deleted.
You can define tokens valid only in some context, or invalid in other.

Oh, and token names cascade, it means that {format.monospace:Kadet\Highlighter\Parser\Token\Token}`string.single`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} is {format.monospace:Kadet\Highlighter\Parser\Token\Token}`string`{/format.monospace:Kadet\Highlighter\Parser\Token\Token},
but {format.monospace:Kadet\Highlighter\Parser\Token\Token}`string`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} is necessarily not {format.monospace:Kadet\Highlighter\Parser\Token\Token}`string.single`{/format.monospace:Kadet\Highlighter\Parser\Token\Token}.

{format.header:Kadet\Highlighter\Parser\Token\Token}### Write your own language definitions easily{/format.header:Kadet\Highlighter\Parser\Token\Token}
It's possible to easily extend {format.monospace:Kadet\Highlighter\Parser\Token\Token}`KeyLighter`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} with new languages,
more detailed documentation coming soon.

For example XML definition looks like this:
{format.block.code:Kadet\Highlighter\Parser\Token\Token}```php
{language.php:Kadet\Highlighter\Parser\Token\LanguageToken}{keyword:Kadet\Highlighter\Parser\Token\Token}class{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Xml{/symbol.class:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}extends{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}GreedyLanguage{/symbol.class:Kadet\Highlighter\Parser\Token\Token}
{
    {keyword:Kadet\Highlighter\Parser\Token\Token}const{/keyword:Kadet\Highlighter\Parser\Token\Token} {constant.static:Kadet\Highlighter\Parser\Token\Token}IDENTIFIER{/constant.static:Kadet\Highlighter\Parser\Token\Token} = {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'(?P<namespace>[\w\.-]+:)?(?P<name>[\w\.-]+)'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token};{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}

    {comment.docblock:Kadet\Highlighter\Parser\Token\Token}/**
     * Tokenization rules
     */{/comment.docblock:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}public{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}function{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}setupRules{/symbol.function:Kadet\Highlighter\Parser\Token\Token}()
    {
        {variable:Kadet\Highlighter\Parser\Token\Token}$this{/variable:Kadet\Highlighter\Parser\Token\Token}->{variable.property:Kadet\Highlighter\Parser\Token\Token}rules{/variable.property:Kadet\Highlighter\Parser\Token\Token}->{call:Kadet\Highlighter\Parser\Token\Token}{variable.property:Kadet\Highlighter\Parser\Token\Token}addMany{/variable.property:Kadet\Highlighter\Parser\Token\Token}{/call:Kadet\Highlighter\Parser\Token\Token}([
            {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'tag.open'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}  => [
                {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}OpenRule{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}RegexMatcher{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'/(<\w+)[:\/>:\s]/'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
                {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}CloseRule{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}SubStringMatcher{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'>'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} [{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'context'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => [{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'!string'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'!comment'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]])
            ]{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
            {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'tag.close'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Rule{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}RegexMatcher{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'/(<\/(?:\w+:)?(?:[\w\.]+)>)/'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}

            {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'symbol.tag'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Rule{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}RegexMatcher{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'/<{operator.escape:Kadet\Highlighter\Parser\Token\Token}\\{/operator.escape:Kadet\Highlighter\Parser\Token\Token}/?'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} . {symbol.class:Kadet\Highlighter\Parser\Token\Token}{keyword:Kadet\Highlighter\Parser\Token\Token}self{/keyword:Kadet\Highlighter\Parser\Token\Token}{/symbol.class:Kadet\Highlighter\Parser\Token\Token}::{constant.static:Kadet\Highlighter\Parser\Token\Token}IDENTIFIER{/constant.static:Kadet\Highlighter\Parser\Token\Token} . {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'/'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} [
                {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'name'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}      => {symbol.class:Kadet\Highlighter\Parser\Token\Token}Token{/symbol.class:Kadet\Highlighter\Parser\Token\Token}::{constant.static:Kadet\Highlighter\Parser\Token\Token}NAME{/constant.static:Kadet\Highlighter\Parser\Token\Token}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
                {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'namespace'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'$.namespace'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
            ]){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} [{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'context'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => [{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'tag'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'!string'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]]){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}

            {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'symbol.attribute'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Rule{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}RegexMatcher{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'/'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} . {symbol.class:Kadet\Highlighter\Parser\Token\Token}{keyword:Kadet\Highlighter\Parser\Token\Token}self{/keyword:Kadet\Highlighter\Parser\Token\Token}{/symbol.class:Kadet\Highlighter\Parser\Token\Token}::{constant.static:Kadet\Highlighter\Parser\Token\Token}IDENTIFIER{/constant.static:Kadet\Highlighter\Parser\Token\Token} . {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'=/'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} [
                {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'name'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}      => {symbol.class:Kadet\Highlighter\Parser\Token\Token}Token{/symbol.class:Kadet\Highlighter\Parser\Token\Token}::{constant.static:Kadet\Highlighter\Parser\Token\Token}NAME{/constant.static:Kadet\Highlighter\Parser\Token\Token}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
                {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'namespace'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'$.namespace'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}
            ]){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} [{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'context'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => [{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'tag'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'!string'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]]){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}

            {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'constant.entity'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Rule{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}RegexMatcher{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'/(&(?:\#\d+|[a-z])+;)/si'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken})){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}

            {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'comment'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}Rule{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({keyword:Kadet\Highlighter\Parser\Token\Token}new{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.class:Kadet\Highlighter\Parser\Token\Token}CommentMatcher{/symbol.class:Kadet\Highlighter\Parser\Token\Token}({symbol.type:Kadet\Highlighter\Parser\Token\Token}null{/symbol.type:Kadet\Highlighter\Parser\Token\Token}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} [[{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'<!--'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'-->'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]])){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
            {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'string'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}  => {symbol.class:Kadet\Highlighter\Parser\Token\Token}CommonFeatures{/symbol.class:Kadet\Highlighter\Parser\Token\Token}::{call:Kadet\Highlighter\Parser\Token\Token}strings{/call:Kadet\Highlighter\Parser\Token\Token}([{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'single'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'{operator.escape:Kadet\Highlighter\Parser\Token\Token}\'{/operator.escape:Kadet\Highlighter\Parser\Token\Token}'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'double'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'"'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]{operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token} [{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'context'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken} => [{string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'tag'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}]]){operator.punctuation:Kadet\Highlighter\Parser\Token\Token},{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
        ]){operator.punctuation:Kadet\Highlighter\Parser\Token\Token};{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
    }

    {comment.docblock:Kadet\Highlighter\Parser\Token\Token}/** {{symbol.annotation:Kadet\Highlighter\Parser\Token\Token}@inheritdoc{/symbol.annotation:Kadet\Highlighter\Parser\Token\Token}} */{/comment.docblock:Kadet\Highlighter\Parser\Token\Token}
    {keyword:Kadet\Highlighter\Parser\Token\Token}public{/keyword:Kadet\Highlighter\Parser\Token\Token} {keyword:Kadet\Highlighter\Parser\Token\Token}function{/keyword:Kadet\Highlighter\Parser\Token\Token} {symbol.function:Kadet\Highlighter\Parser\Token\Token}getIdentifier{/symbol.function:Kadet\Highlighter\Parser\Token\Token}()
    {
        {keyword:Kadet\Highlighter\Parser\Token\Token}return{/keyword:Kadet\Highlighter\Parser\Token\Token} {string.single:Kadet\Highlighter\Parser\Token\ContextualToken}'xml'{/string.single:Kadet\Highlighter\Parser\Token\ContextualToken}{operator.punctuation:Kadet\Highlighter\Parser\Token\Token};{/operator.punctuation:Kadet\Highlighter\Parser\Token\Token}
    }
}{/language.php:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}

I will try to write as many definitions as I only can, but any PRs are welcome.

{format.header:Kadet\Highlighter\Parser\Token\Token}### Embedding languages{/format.header:Kadet\Highlighter\Parser\Token\Token}
Many languages can be used simultaneously, {format.italics:Kadet\Highlighter\Parser\Token\Token}*css*{/format.italics:Kadet\Highlighter\Parser\Token\Token} or {format.italics:Kadet\Highlighter\Parser\Token\Token}*js*{/format.italics:Kadet\Highlighter\Parser\Token\Token} inside {format.italics:Kadet\Highlighter\Parser\Token\Token}*html*{/format.italics:Kadet\Highlighter\Parser\Token\Token}, {format.italics:Kadet\Highlighter\Parser\Token\Token}*sql*{/format.italics:Kadet\Highlighter\Parser\Token\Token} in  {format.italics:Kadet\Highlighter\Parser\Token\Token}*php*{/format.italics:Kadet\Highlighter\Parser\Token\Token} and so on. {format.bold:Kadet\Highlighter\Parser\Token\Token}**KeyLighter**{/format.bold:Kadet\Highlighter\Parser\Token\Token} can handle and highlight embedded languages without any problem.

{operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[Embedded languages]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}http://i.imgur.com/gJr6shy.png{/symbol.url:Kadet\Highlighter\Parser\Token\Token})

{format.header:Kadet\Highlighter\Parser\Token\Token}### Fast {operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[Optimized for php7.0]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://img.shields.io/badge/optimized%20for-PHP%207-8892BF.svg?style=flat-square{/symbol.url:Kadet\Highlighter\Parser\Token\Token}){/format.header:Kadet\Highlighter\Parser\Token\Token}
Even though it wasn't supposed to be fastest code highlighter in PHP
it is still quite fast, up to few times faster than {symbol.link:Kadet\Highlighter\Parser\Token\Token}[GeSHi]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}http://geshi.org/{/symbol.url:Kadet\Highlighter\Parser\Token\Token}).
It performs best on PHP 7 (more than 2x faster than GeSHi in every case).

{format.header:Kadet\Highlighter\Parser\Token\Token}## Testing {operator.image:Kadet\Highlighter\Parser\Token\Token}!{/operator.image:Kadet\Highlighter\Parser\Token\Token}{symbol.image.title:Kadet\Highlighter\Parser\Token\Token}[Code Coverage]{/symbol.image.title:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://img.shields.io/scrutinizer/coverage/g/kadet1090/keylighter.svg?style=flat-square{/symbol.url:Kadet\Highlighter\Parser\Token\Token}){/format.header:Kadet\Highlighter\Parser\Token\Token}
{format.bold:Kadet\Highlighter\Parser\Token\Token}**KeyLighter**{/format.bold:Kadet\Highlighter\Parser\Token\Token} uses {format.monospace:Kadet\Highlighter\Parser\Token\Token}`phpunit`{/format.monospace:Kadet\Highlighter\Parser\Token\Token} for testing:
{format.block.code:Kadet\Highlighter\Parser\Token\Token}```bash
{language.shell:Kadet\Highlighter\Parser\Token\LanguageToken}{delimiter:Kadet\Highlighter\Parser\Token\Token}${/delimiter:Kadet\Highlighter\Parser\Token\Token} {call:Kadet\Highlighter\Parser\Token\Token}phpunit{/call:Kadet\Highlighter\Parser\Token\Token}{/language.shell:Kadet\Highlighter\Parser\Token\LanguageToken}
```{/format.block.code:Kadet\Highlighter\Parser\Token\Token}

{format.header:Kadet\Highlighter\Parser\Token\Token}## Roadmap{/format.header:Kadet\Highlighter\Parser\Token\Token}
There are still few things to do, you can find all on {symbol.link:Kadet\Highlighter\Parser\Token\Token}[trello]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://trello.com/b/9I4CO0Te/highlighter{/symbol.url:Kadet\Highlighter\Parser\Token\Token}).

{format.header:Kadet\Highlighter\Parser\Token\Token}## Contributing{/format.header:Kadet\Highlighter\Parser\Token\Token}
See {symbol.link:Kadet\Highlighter\Parser\Token\Token}[CONTRIBUTING.md]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}(./CONTRIBUTING.md) for details.

{format.header:Kadet\Highlighter\Parser\Token\Token}## Thanks{/format.header:Kadet\Highlighter\Parser\Token\Token}
For {symbol.link:Kadet\Highlighter\Parser\Token\Token}[Maciej]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://github.com/ksiazkowicz{/symbol.url:Kadet\Highlighter\Parser\Token\Token}), {symbol.link:Kadet\Highlighter\Parser\Token\Token}[Maciej]{/symbol.link:Kadet\Highlighter\Parser\Token\Token}({symbol.url:Kadet\Highlighter\Parser\Token\Token}https://github.com/sobak{/symbol.url:Kadet\Highlighter\Parser\Token\Token}) and Monika for all support, moral too.{/language.markdown:Kadet\Highlighter\Parser\Token\LanguageToken}